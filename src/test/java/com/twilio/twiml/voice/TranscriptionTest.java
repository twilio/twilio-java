/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml.voice;

import com.twilio.twiml.GenericNode;
import org.junit.Assert;
import org.junit.Test;

/**
 * Test class for {@link Transcription}
 */
public class TranscriptionTest {
    @Test
    public void testEmptyElement() {
        Transcription elem = new Transcription.Builder().build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription/>",
            elem.toXml()
        );
    }

    @Test
    public void testEmptyElementUrl() {
        Transcription elem = new Transcription.Builder().build();

        Assert.assertEquals("%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CTranscription%2F%3E", elem.toUrl());
    }

    @Test
    public void testElementWithParams() {
        Transcription elem = new Transcription.Builder()
            .name("name")
            .track(Transcription.Track.INBOUND_TRACK)
            .statusCallbackUrl("status_callback_url")
            .statusCallbackMethod(Transcription.StatusCallbackMethod.GET)
            .inboundTrackLabel("inbound_track_label")
            .outboundTrackLabel("outbound_track_label")
            .partialResults(true)
            .languageCode("language_code")
            .transcriptionEngine("transcription_engine")
            .profanityFilter(true)
            .speechModel("speech_model")
            .hints("hints")
            .enableAutomaticPunctuation(true)
            .build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription enableAutomaticPunctuation=\"true\" hints=\"hints\" inboundTrackLabel=\"inbound_track_label\" languageCode=\"language_code\" name=\"name\" outboundTrackLabel=\"outbound_track_label\" partialResults=\"true\" profanityFilter=\"true\" speechModel=\"speech_model\" statusCallbackMethod=\"GET\" statusCallbackUrl=\"status_callback_url\" track=\"inbound_track\" transcriptionEngine=\"transcription_engine\"/>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithExtraAttributes() {
        Transcription elem = new Transcription.Builder().option("foo", "bar").option("a", "b").build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription a=\"b\" foo=\"bar\"/>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithChildren() {
        Transcription.Builder builder = new Transcription.Builder();

        builder.config(new Config.Builder().name("name").value("value").build());

        builder.parameter(new Parameter.Builder().name("name").value("value").build());

        Transcription elem = builder.build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription>" +
                "<Config name=\"name\" value=\"value\"/>" +
                "<Parameter name=\"name\" value=\"value\"/>" +
            "</Transcription>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithTextNode() {
        Transcription.Builder builder = new Transcription.Builder();

        builder.addText("Hey no tags!");

        Transcription elem = builder.build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription>" +
            "Hey no tags!" +
            "</Transcription>",
            elem.toXml()
        );
    }

    @Test
    public void testMixedContent() {
        GenericNode.Builder child = new GenericNode.Builder("Child");
        child.addText("content");

        Transcription.Builder builder = new Transcription.Builder();

        builder.addText("before");
        builder.addChild(child.build());
        builder.addText("after");

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription>" +
            "before" +
            "<Child>content</Child>" +
            "after" +
            "</Transcription>",
            builder.build().toXml()
        );
    }

    @Test
    public void testElementWithGenericNode() {
        GenericNode.Builder genericBuilder = new GenericNode.Builder("genericTag");
        genericBuilder.addText("Some text");
        GenericNode node = genericBuilder.build();

        Transcription.Builder builder = new Transcription.Builder();
        Transcription elem = builder.addChild(node).build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription>" +
            "<genericTag>" +
            "Some text" +
            "</genericTag>" +
            "</Transcription>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithGenericNodeAttributes() {
        GenericNode.Builder genericBuilder = new GenericNode.Builder("genericTag");
        GenericNode node = genericBuilder.option("key", "value").addText("someText").build();

        Transcription.Builder builder = new Transcription.Builder();
        Transcription elem = builder.addChild(node).build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Transcription>" +
            "<genericTag key=\"value\">" +
            "someText" +
            "</genericTag>" +
            "</Transcription>",
            elem.toXml()
        );
    }

    @Test
    public void testXmlAttributesDeserialization() {
        final Transcription elem = new Transcription.Builder()
            .name("name")
            .track(Transcription.Track.INBOUND_TRACK)
            .statusCallbackUrl("status_callback_url")
            .statusCallbackMethod(Transcription.StatusCallbackMethod.GET)
            .inboundTrackLabel("inbound_track_label")
            .outboundTrackLabel("outbound_track_label")
            .partialResults(true)
            .languageCode("language_code")
            .transcriptionEngine("transcription_engine")
            .profanityFilter(true)
            .speechModel("speech_model")
            .hints("hints")
            .enableAutomaticPunctuation(true)
            .build();

        Assert.assertEquals(
            Transcription.Builder.fromXml("<Transcription enableAutomaticPunctuation=\"true\" hints=\"hints\" inboundTrackLabel=\"inbound_track_label\" languageCode=\"language_code\" name=\"name\" outboundTrackLabel=\"outbound_track_label\" partialResults=\"true\" profanityFilter=\"true\" speechModel=\"speech_model\" statusCallbackMethod=\"GET\" statusCallbackUrl=\"status_callback_url\" track=\"inbound_track\" transcriptionEngine=\"transcription_engine\"/>").build().toXml(),
            elem.toXml()
        );
    }

    @Test
    public void testXmlChildrenDeserialization() {
        final Transcription.Builder builder = new Transcription.Builder();

        builder.config(new Config.Builder().name("name").value("value").build());

        builder.parameter(new Parameter.Builder().name("name").value("value").build());

        final Transcription elem = builder.build();

        Assert.assertEquals(
            Transcription.Builder.fromXml("<Transcription>" +
                "<Config name=\"name\" value=\"value\"/>" +
                "<Parameter name=\"name\" value=\"value\"/>" +
            "</Transcription>").build().toXml(),
            elem.toXml()
        );
    }

    @Test
    public void testXmlEmptyChildrenDeserialization() {
        final Transcription.Builder builder = new Transcription.Builder();

        builder.config(new Config.Builder().build());

        builder.parameter(new Parameter.Builder().build());

        final Transcription elem = builder.build();

        Assert.assertEquals(
            Transcription.Builder.fromXml("<Transcription>" +
                "<Config/>" +
                "<Parameter/>" +
            "</Transcription>").build().toXml(),
            elem.toXml()
        );
    }
}