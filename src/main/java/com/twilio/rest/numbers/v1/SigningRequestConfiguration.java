/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.numbers.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Objects;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class SigningRequestConfiguration extends Resource {

    private static final long serialVersionUID = 45135348317638L;

    public static SigningRequestConfigurationCreator creator() {
        return new SigningRequestConfigurationCreator();
    }

    /**
     * Converts a JSON String into a SigningRequestConfiguration object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return SigningRequestConfiguration object represented by the provided JSON
     */
    public static SigningRequestConfiguration fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(
                json,
                SigningRequestConfiguration.class
            );
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a SigningRequestConfiguration object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return SigningRequestConfiguration object represented by the provided JSON
     */
    public static SigningRequestConfiguration fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(
                json,
                SigningRequestConfiguration.class
            );
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String logoSid;
    private final String friendlyName;
    private final String product;
    private final String country;
    private final String emailSubject;
    private final String emailMessage;
    private final String urlRedirection;
    private final URI url;

    @JsonCreator
    private SigningRequestConfiguration(
        @JsonProperty("logo_sid") final String logoSid,
        @JsonProperty("friendly_name") final String friendlyName,
        @JsonProperty("product") final String product,
        @JsonProperty("country") final String country,
        @JsonProperty("email_subject") final String emailSubject,
        @JsonProperty("email_message") final String emailMessage,
        @JsonProperty("url_redirection") final String urlRedirection,
        @JsonProperty("url") final URI url
    ) {
        this.logoSid = logoSid;
        this.friendlyName = friendlyName;
        this.product = product;
        this.country = country;
        this.emailSubject = emailSubject;
        this.emailMessage = emailMessage;
        this.urlRedirection = urlRedirection;
        this.url = url;
    }

    public final String getLogoSid() {
        return this.logoSid;
    }

    public final String getFriendlyName() {
        return this.friendlyName;
    }

    public final String getProduct() {
        return this.product;
    }

    public final String getCountry() {
        return this.country;
    }

    public final String getEmailSubject() {
        return this.emailSubject;
    }

    public final String getEmailMessage() {
        return this.emailMessage;
    }

    public final String getUrlRedirection() {
        return this.urlRedirection;
    }

    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        SigningRequestConfiguration other = (SigningRequestConfiguration) o;

        return (
            Objects.equals(logoSid, other.logoSid) &&
            Objects.equals(friendlyName, other.friendlyName) &&
            Objects.equals(product, other.product) &&
            Objects.equals(country, other.country) &&
            Objects.equals(emailSubject, other.emailSubject) &&
            Objects.equals(emailMessage, other.emailMessage) &&
            Objects.equals(urlRedirection, other.urlRedirection) &&
            Objects.equals(url, other.url)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            logoSid,
            friendlyName,
            product,
            country,
            emailSubject,
            emailMessage,
            urlRedirection,
            url
        );
    }
}
