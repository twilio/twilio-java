/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml.voice;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.twilio.twiml.TwiML;
import com.twilio.twiml.TwiMLException;

import java.util.HashMap;
import java.util.Map;

/**
 * TwiML wrapper for {@code <ConversationRelay>}
 */
@JsonDeserialize(builder = ConversationRelay.Builder.class)
public class ConversationRelay extends TwiML {
    private final String url;
    private final String language;
    private final String ttsLanguage;
    private final String transcriptionLanguage;
    private final String ttsProvider;
    private final String voice;
    private final String transcriptionProvider;
    private final String speechModel;
    private final Boolean profanityFilter;
    private final Boolean dtmfDetection;
    private final String welcomeGreeting;
    private final Boolean partialPrompts;
    private final String welcomeGreetingInterruptible;
    private final String interruptible;
    private final Boolean preemptible;
    private final String hints;
    private final String intelligenceService;
    private final Boolean reportInputDuringAgentSpeech;
    private final String elevenlabsTextNormalization;
    private final String interruptSensitivity;
    private final String debug;

    /**
     * For XML Serialization/Deserialization
     */
    private ConversationRelay() {
        this(new Builder());
    }

    /**
     * Create a new {@code <ConversationRelay>} element
     */
    private ConversationRelay(Builder b) {
        super("ConversationRelay", b);
        this.url = b.url;
        this.language = b.language;
        this.ttsLanguage = b.ttsLanguage;
        this.transcriptionLanguage = b.transcriptionLanguage;
        this.ttsProvider = b.ttsProvider;
        this.voice = b.voice;
        this.transcriptionProvider = b.transcriptionProvider;
        this.speechModel = b.speechModel;
        this.profanityFilter = b.profanityFilter;
        this.dtmfDetection = b.dtmfDetection;
        this.welcomeGreeting = b.welcomeGreeting;
        this.partialPrompts = b.partialPrompts;
        this.welcomeGreetingInterruptible = b.welcomeGreetingInterruptible;
        this.interruptible = b.interruptible;
        this.preemptible = b.preemptible;
        this.hints = b.hints;
        this.intelligenceService = b.intelligenceService;
        this.reportInputDuringAgentSpeech = b.reportInputDuringAgentSpeech;
        this.elevenlabsTextNormalization = b.elevenlabsTextNormalization;
        this.interruptSensitivity = b.interruptSensitivity;
        this.debug = b.debug;
    }

    /**
     * Attributes to set on the generated XML element
     *
     * @return A Map of attribute keys to values
     */
    protected Map<String, String> getElementAttributes() {
        // Preserve order of attributes
        Map<String, String> attrs = new HashMap<>();

        if (this.getUrl() != null) {
            attrs.put("url", this.getUrl());
        }
        if (this.getLanguage() != null) {
            attrs.put("language", this.getLanguage());
        }
        if (this.getTtsLanguage() != null) {
            attrs.put("ttsLanguage", this.getTtsLanguage());
        }
        if (this.getTranscriptionLanguage() != null) {
            attrs.put("transcriptionLanguage", this.getTranscriptionLanguage());
        }
        if (this.getTtsProvider() != null) {
            attrs.put("ttsProvider", this.getTtsProvider());
        }
        if (this.getVoice() != null) {
            attrs.put("voice", this.getVoice());
        }
        if (this.getTranscriptionProvider() != null) {
            attrs.put("transcriptionProvider", this.getTranscriptionProvider());
        }
        if (this.getSpeechModel() != null) {
            attrs.put("speechModel", this.getSpeechModel());
        }
        if (this.isProfanityFilter() != null) {
            attrs.put("profanityFilter", this.isProfanityFilter().toString());
        }
        if (this.isDtmfDetection() != null) {
            attrs.put("dtmfDetection", this.isDtmfDetection().toString());
        }
        if (this.getWelcomeGreeting() != null) {
            attrs.put("welcomeGreeting", this.getWelcomeGreeting());
        }
        if (this.isPartialPrompts() != null) {
            attrs.put("partialPrompts", this.isPartialPrompts().toString());
        }
        if (this.getWelcomeGreetingInterruptible() != null) {
            attrs.put("welcomeGreetingInterruptible", this.getWelcomeGreetingInterruptible());
        }
        if (this.getInterruptible() != null) {
            attrs.put("interruptible", this.getInterruptible());
        }
        if (this.isPreemptible() != null) {
            attrs.put("preemptible", this.isPreemptible().toString());
        }
        if (this.getHints() != null) {
            attrs.put("hints", this.getHints());
        }
        if (this.getIntelligenceService() != null) {
            attrs.put("intelligenceService", this.getIntelligenceService());
        }
        if (this.isReportInputDuringAgentSpeech() != null) {
            attrs.put("reportInputDuringAgentSpeech", this.isReportInputDuringAgentSpeech().toString());
        }
        if (this.getElevenlabsTextNormalization() != null) {
            attrs.put("elevenlabsTextNormalization", this.getElevenlabsTextNormalization());
        }
        if (this.getInterruptSensitivity() != null) {
            attrs.put("interruptSensitivity", this.getInterruptSensitivity());
        }
        if (this.getDebug() != null) {
            attrs.put("debug", this.getDebug());
        }

        return attrs;
    }

    /**
     * URL of the remote service where the session is connected to
     *
     * @return URL of the remote service where the session is connected to
     */
    public String getUrl() {
        return url;
    }

    /**
     * Language to be used for both text-to-speech and transcription
     *
     * @return Language to be used for both text-to-speech and transcription
     */
    public String getLanguage() {
        return language;
    }

    /**
     * Language to be used for text-to-speech
     *
     * @return Language to be used for text-to-speech
     */
    public String getTtsLanguage() {
        return ttsLanguage;
    }

    /**
     * Language to be used for transcription
     *
     * @return Language to be used for transcription
     */
    public String getTranscriptionLanguage() {
        return transcriptionLanguage;
    }

    /**
     * Provider to be used for text-to-speech
     *
     * @return Provider to be used for text-to-speech
     */
    public String getTtsProvider() {
        return ttsProvider;
    }

    /**
     * Voice to be used for text-to-speech
     *
     * @return Voice to be used for text-to-speech
     */
    public String getVoice() {
        return voice;
    }

    /**
     * Provider to be used for transcription
     *
     * @return Provider to be used for transcription
     */
    public String getTranscriptionProvider() {
        return transcriptionProvider;
    }

    /**
     * Speech model to be used for transcription
     *
     * @return Speech model to be used for transcription
     */
    public String getSpeechModel() {
        return speechModel;
    }

    /**
     * Whether profanities should be filtered out of the speech transcription
     *
     * @return Whether profanities should be filtered out of the speech
     *         transcription
     */
    public Boolean isProfanityFilter() {
        return profanityFilter;
    }

    /**
     * Whether DTMF tones should be detected and reported in speech transcription
     *
     * @return Whether DTMF tones should be detected and reported in speech
     *         transcription
     */
    public Boolean isDtmfDetection() {
        return dtmfDetection;
    }

    /**
     * The sentence to be played automatically when the session is connected
     *
     * @return The sentence to be played automatically when the session is connected
     */
    public String getWelcomeGreeting() {
        return welcomeGreeting;
    }

    /**
     * Whether partial prompts should be reported to WebSocket server before the
     * caller finishes speaking
     *
     * @return Whether partial prompts should be reported to WebSocket server
     *         before the caller finishes speaking
     */
    public Boolean isPartialPrompts() {
        return partialPrompts;
    }

    /**
     * "Whether and how the input from a caller, such as speaking or DTMF can
     * interrupt the welcome greeting
     *
     * @return "Whether and how the input from a caller, such as speaking or DTMF
     *         can interrupt the welcome greeting
     */
    public String getWelcomeGreetingInterruptible() {
        return welcomeGreetingInterruptible;
    }

    /**
     * Whether and how the input from a caller, such as speaking or DTMF can
     * interrupt the play of text-to-speech
     *
     * @return Whether and how the input from a caller, such as speaking or DTMF
     *         can interrupt the play of text-to-speech
     */
    public String getInterruptible() {
        return interruptible;
    }

    /**
     * Whether subsequent text-to-speech or play media can interrupt the on-going
     * play of text-to-speech or media
     *
     * @return Whether subsequent text-to-speech or play media can interrupt the
     *         on-going play of text-to-speech or media
     */
    public Boolean isPreemptible() {
        return preemptible;
    }

    /**
     * Phrases to help better accuracy in speech recognition of these pharases
     *
     * @return Phrases to help better accuracy in speech recognition of these
     *         pharases
     */
    public String getHints() {
        return hints;
    }

    /**
     * The Conversational Intelligence Service id or unique name to be used for the
     * session
     *
     * @return The Conversational Intelligence Service id or unique name to be used
     *         for the session
     */
    public String getIntelligenceService() {
        return intelligenceService;
    }

    /**
     * Whether prompts should be reported to WebSocket server when text-to-speech
     * playing and interrupt is disabled
     *
     * @return Whether prompts should be reported to WebSocket server when
     *         text-to-speech playing and interrupt is disabled
     */
    public Boolean isReportInputDuringAgentSpeech() {
        return reportInputDuringAgentSpeech;
    }

    /**
     * When using ElevenLabs as TTS provider, this parameter allows you to enable or
     * disable its text normalization feature
     *
     * @return When using ElevenLabs as TTS provider, this parameter allows you to
     *         enable or disable its text normalization feature
     */
    public String getElevenlabsTextNormalization() {
        return elevenlabsTextNormalization;
    }

    /**
     * Set the sensitivity of the interrupt feature for speech. The value can be
     * low, medium, or high
     *
     * @return Set the sensitivity of the interrupt feature for speech. The value
     *         can be low, medium, or high
     */
    public String getInterruptSensitivity() {
        return interruptSensitivity;
    }

    /**
     * Multiple debug options to be used for troubleshooting
     *
     * @return Multiple debug options to be used for troubleshooting
     */
    public String getDebug() {
        return debug;
    }

    /**
     * Create a new {@code <ConversationRelay>} element
     */
    @JsonPOJOBuilder(withPrefix = "")
    public static class Builder extends TwiML.Builder<Builder> {
        /**
         * Create and return a {@code <ConversationRelay.Builder>} from an XML string
         */
        public static Builder fromXml(final String xml) throws TwiMLException {
            try {
                return OBJECT_MAPPER.readValue(xml, Builder.class);
            } catch (final JsonProcessingException jpe) {
                throw new TwiMLException(
                    "Failed to deserialize a ConversationRelay.Builder from the provided XML string: " + jpe.getMessage());
            } catch (final Exception e) {
                throw new TwiMLException("Unhandled exception: " + e.getMessage());
            }
        }

        private String url;
        private String language;
        private String ttsLanguage;
        private String transcriptionLanguage;
        private String ttsProvider;
        private String voice;
        private String transcriptionProvider;
        private String speechModel;
        private Boolean profanityFilter;
        private Boolean dtmfDetection;
        private String welcomeGreeting;
        private Boolean partialPrompts;
        private String welcomeGreetingInterruptible;
        private String interruptible;
        private Boolean preemptible;
        private String hints;
        private String intelligenceService;
        private Boolean reportInputDuringAgentSpeech;
        private String elevenlabsTextNormalization;
        private String interruptSensitivity;
        private String debug;

        /**
         * URL of the remote service where the session is connected to
         */
        @JacksonXmlProperty(isAttribute = true, localName = "url")
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Language to be used for both text-to-speech and transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "language")
        public Builder language(String language) {
            this.language = language;
            return this;
        }

        /**
         * Language to be used for text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "ttsLanguage")
        public Builder ttsLanguage(String ttsLanguage) {
            this.ttsLanguage = ttsLanguage;
            return this;
        }

        /**
         * Language to be used for transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "transcriptionLanguage")
        public Builder transcriptionLanguage(String transcriptionLanguage) {
            this.transcriptionLanguage = transcriptionLanguage;
            return this;
        }

        /**
         * Provider to be used for text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "ttsProvider")
        public Builder ttsProvider(String ttsProvider) {
            this.ttsProvider = ttsProvider;
            return this;
        }

        /**
         * Voice to be used for text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "voice")
        public Builder voice(String voice) {
            this.voice = voice;
            return this;
        }

        /**
         * Provider to be used for transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "transcriptionProvider")
        public Builder transcriptionProvider(String transcriptionProvider) {
            this.transcriptionProvider = transcriptionProvider;
            return this;
        }

        /**
         * Speech model to be used for transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "speechModel")
        public Builder speechModel(String speechModel) {
            this.speechModel = speechModel;
            return this;
        }

        /**
         * Whether profanities should be filtered out of the speech transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "profanityFilter")
        public Builder profanityFilter(Boolean profanityFilter) {
            this.profanityFilter = profanityFilter;
            return this;
        }

        /**
         * Whether DTMF tones should be detected and reported in speech transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "dtmfDetection")
        public Builder dtmfDetection(Boolean dtmfDetection) {
            this.dtmfDetection = dtmfDetection;
            return this;
        }

        /**
         * The sentence to be played automatically when the session is connected
         */
        @JacksonXmlProperty(isAttribute = true, localName = "welcomeGreeting")
        public Builder welcomeGreeting(String welcomeGreeting) {
            this.welcomeGreeting = welcomeGreeting;
            return this;
        }

        /**
         * Whether partial prompts should be reported to WebSocket server before the
         * caller finishes speaking
         */
        @JacksonXmlProperty(isAttribute = true, localName = "partialPrompts")
        public Builder partialPrompts(Boolean partialPrompts) {
            this.partialPrompts = partialPrompts;
            return this;
        }

        /**
         * "Whether and how the input from a caller, such as speaking or DTMF can
         * interrupt the welcome greeting
         */
        @JacksonXmlProperty(isAttribute = true, localName = "welcomeGreetingInterruptible")
        public Builder welcomeGreetingInterruptible(String welcomeGreetingInterruptible) {
            this.welcomeGreetingInterruptible = welcomeGreetingInterruptible;
            return this;
        }

        /**
         * Whether and how the input from a caller, such as speaking or DTMF can
         * interrupt the play of text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "interruptible")
        public Builder interruptible(String interruptible) {
            this.interruptible = interruptible;
            return this;
        }

        /**
         * Whether subsequent text-to-speech or play media can interrupt the on-going
         * play of text-to-speech or media
         */
        @JacksonXmlProperty(isAttribute = true, localName = "preemptible")
        public Builder preemptible(Boolean preemptible) {
            this.preemptible = preemptible;
            return this;
        }

        /**
         * Phrases to help better accuracy in speech recognition of these pharases
         */
        @JacksonXmlProperty(isAttribute = true, localName = "hints")
        public Builder hints(String hints) {
            this.hints = hints;
            return this;
        }

        /**
         * The Conversational Intelligence Service id or unique name to be used for the
         * session
         */
        @JacksonXmlProperty(isAttribute = true, localName = "intelligenceService")
        public Builder intelligenceService(String intelligenceService) {
            this.intelligenceService = intelligenceService;
            return this;
        }

        /**
         * Whether prompts should be reported to WebSocket server when text-to-speech
         * playing and interrupt is disabled
         */
        @JacksonXmlProperty(isAttribute = true, localName = "reportInputDuringAgentSpeech")
        public Builder reportInputDuringAgentSpeech(Boolean reportInputDuringAgentSpeech) {
            this.reportInputDuringAgentSpeech = reportInputDuringAgentSpeech;
            return this;
        }

        /**
         * When using ElevenLabs as TTS provider, this parameter allows you to enable or
         * disable its text normalization feature
         */
        @JacksonXmlProperty(isAttribute = true, localName = "elevenlabsTextNormalization")
        public Builder elevenlabsTextNormalization(String elevenlabsTextNormalization) {
            this.elevenlabsTextNormalization = elevenlabsTextNormalization;
            return this;
        }

        /**
         * Set the sensitivity of the interrupt feature for speech. The value can be
         * low, medium, or high
         */
        @JacksonXmlProperty(isAttribute = true, localName = "interruptSensitivity")
        public Builder interruptSensitivity(String interruptSensitivity) {
            this.interruptSensitivity = interruptSensitivity;
            return this;
        }

        /**
         * Multiple debug options to be used for troubleshooting
         */
        @JacksonXmlProperty(isAttribute = true, localName = "debug")
        public Builder debug(String debug) {
            this.debug = debug;
            return this;
        }

        /**
         * Add a child {@code <Language>} element
         */
        @JacksonXmlProperty(isAttribute = false, localName = "Language")
        public Builder language(Language language) {
            this.children.add(language);
            return this;
        }

        /**
         * Add a child {@code <Parameter>} element
         */
        @JacksonXmlProperty(isAttribute = false, localName = "Parameter")
        public Builder parameter(Parameter parameter) {
            this.children.add(parameter);
            return this;
        }

        /**
         * Create and return resulting {@code <ConversationRelay>} element
         */
        public ConversationRelay build() {
            return new ConversationRelay(this);
        }
    }
}