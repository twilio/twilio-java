/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.flexapi.v1.interaction.interactionchannel;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.Objects;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class InteractionTransfer extends Resource {

    private static final long serialVersionUID = 149249433338910L;

    public static InteractionTransferCreator creator(
        final String pathInteractionSid,
        final String pathChannelSid
    ) {
        return new InteractionTransferCreator(
            pathInteractionSid,
            pathChannelSid
        );
    }

    public static InteractionTransferFetcher fetcher(
        final String pathInteractionSid,
        final String pathChannelSid,
        final String pathSid
    ) {
        return new InteractionTransferFetcher(
            pathInteractionSid,
            pathChannelSid,
            pathSid
        );
    }

    public static InteractionTransferUpdater updater(
        final String pathInteractionSid,
        final String pathChannelSid,
        final String pathSid
    ) {
        return new InteractionTransferUpdater(
            pathInteractionSid,
            pathChannelSid,
            pathSid
        );
    }

    /**
     * Converts a JSON String into a InteractionTransfer object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return InteractionTransfer object represented by the provided JSON
     */
    public static InteractionTransfer fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, InteractionTransfer.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a InteractionTransfer object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return InteractionTransfer object represented by the provided JSON
     */
    public static InteractionTransfer fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, InteractionTransfer.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String sid;
    private final String instanceSid;
    private final String accountSid;
    private final String interactionSid;
    private final String channelSid;
    private final String executionSid;
    private final InteractionTransfer.TransferType type;
    private final InteractionTransfer.TransferStatus status;
    private final String from;
    private final String to;
    private final String noteSid;
    private final String summarySid;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;
    private final URI url;

    @JsonCreator
    private InteractionTransfer(
        @JsonProperty("sid") final String sid,
        @JsonProperty("instance_sid") final String instanceSid,
        @JsonProperty("account_sid") final String accountSid,
        @JsonProperty("interaction_sid") final String interactionSid,
        @JsonProperty("channel_sid") final String channelSid,
        @JsonProperty("execution_sid") final String executionSid,
        @JsonProperty("type") final InteractionTransfer.TransferType type,
        @JsonProperty("status") final InteractionTransfer.TransferStatus status,
        @JsonProperty("from") final String from,
        @JsonProperty("to") final String to,
        @JsonProperty("note_sid") final String noteSid,
        @JsonProperty("summary_sid") final String summarySid,
        @JsonProperty("date_created") final String dateCreated,
        @JsonProperty("date_updated") final String dateUpdated,
        @JsonProperty("url") final URI url
    ) {
        this.sid = sid;
        this.instanceSid = instanceSid;
        this.accountSid = accountSid;
        this.interactionSid = interactionSid;
        this.channelSid = channelSid;
        this.executionSid = executionSid;
        this.type = type;
        this.status = status;
        this.from = from;
        this.to = to;
        this.noteSid = noteSid;
        this.summarySid = summarySid;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
        this.url = url;
    }

    public final String getSid() {
        return this.sid;
    }

    public final String getInstanceSid() {
        return this.instanceSid;
    }

    public final String getAccountSid() {
        return this.accountSid;
    }

    public final String getInteractionSid() {
        return this.interactionSid;
    }

    public final String getChannelSid() {
        return this.channelSid;
    }

    public final String getExecutionSid() {
        return this.executionSid;
    }

    public final InteractionTransfer.TransferType getType() {
        return this.type;
    }

    public final InteractionTransfer.TransferStatus getStatus() {
        return this.status;
    }

    public final String getFrom() {
        return this.from;
    }

    public final String getTo() {
        return this.to;
    }

    public final String getNoteSid() {
        return this.noteSid;
    }

    public final String getSummarySid() {
        return this.summarySid;
    }

    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        InteractionTransfer other = (InteractionTransfer) o;

        return (
            Objects.equals(sid, other.sid) &&
            Objects.equals(instanceSid, other.instanceSid) &&
            Objects.equals(accountSid, other.accountSid) &&
            Objects.equals(interactionSid, other.interactionSid) &&
            Objects.equals(channelSid, other.channelSid) &&
            Objects.equals(executionSid, other.executionSid) &&
            Objects.equals(type, other.type) &&
            Objects.equals(status, other.status) &&
            Objects.equals(from, other.from) &&
            Objects.equals(to, other.to) &&
            Objects.equals(noteSid, other.noteSid) &&
            Objects.equals(summarySid, other.summarySid) &&
            Objects.equals(dateCreated, other.dateCreated) &&
            Objects.equals(dateUpdated, other.dateUpdated) &&
            Objects.equals(url, other.url)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            sid,
            instanceSid,
            accountSid,
            interactionSid,
            channelSid,
            executionSid,
            type,
            status,
            from,
            to,
            noteSid,
            summarySid,
            dateCreated,
            dateUpdated,
            url
        );
    }

    public enum TransferType {
        WARM("warm"),
        COLD("cold"),
        EXTERNAL("external");

        private final String value;

        private TransferType(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static TransferType forValue(final String value) {
            return Promoter.enumFromString(value, TransferType.values());
        }
    }

    public enum TransferStatus {
        ACTIVE("active"),
        FAILED("failed"),
        COMPLETED("completed");

        private final String value;

        private TransferStatus(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static TransferStatus forValue(final String value) {
            return Promoter.enumFromString(value, TransferStatus.values());
        }
    }
}
