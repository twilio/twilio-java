/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml.voice;

import com.twilio.twiml.GenericNode;
import org.junit.Assert;
import org.junit.Test;

/**
 * Test class for {@link Assistant}
 */
public class AssistantTest {
    @Test
    public void testEmptyElement() {
        Assistant elem = new Assistant.Builder().build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant/>",
            elem.toXml()
        );
    }

    @Test
    public void testEmptyElementUrl() {
        Assistant elem = new Assistant.Builder().build();

        Assert.assertEquals("%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CAssistant%2F%3E", elem.toUrl());
    }

    @Test
    public void testElementWithParams() {
        Assistant elem = new Assistant.Builder()
            .id("id")
            .language("language")
            .ttsLanguage("tts_language")
            .transcriptionLanguage("transcription_language")
            .ttsProvider("tts_provider")
            .voice("voice")
            .transcriptionProvider("transcription_provider")
            .speechModel("speech_model")
            .profanityFilter(true)
            .dtmfDetection(true)
            .welcomeGreeting("welcome_greeting")
            .partialPrompts(true)
            .interruptible(true)
            .interruptByDtmf(true)
            .welcomeGreetingInterruptible(true)
            .debug(true)
            .build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant debug=\"true\" dtmfDetection=\"true\" id=\"id\" interruptByDtmf=\"true\" interruptible=\"true\" language=\"language\" partialPrompts=\"true\" profanityFilter=\"true\" speechModel=\"speech_model\" transcriptionLanguage=\"transcription_language\" transcriptionProvider=\"transcription_provider\" ttsLanguage=\"tts_language\" ttsProvider=\"tts_provider\" voice=\"voice\" welcomeGreeting=\"welcome_greeting\" welcomeGreetingInterruptible=\"true\"/>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithExtraAttributes() {
        Assistant elem = new Assistant.Builder().option("foo", "bar").option("a", "b").build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant a=\"b\" foo=\"bar\"/>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithChildren() {
        Assistant.Builder builder = new Assistant.Builder();

        builder.language(new Language.Builder()
                    .code("code")
                    .ttsProvider("tts_provider")
                    .voice("voice")
                    .transcriptionProvider("transcription_provider")
                    .speechModel("speech_model")
                    .build());

        builder.parameter(new Parameter.Builder().name("name").value("value").build());

        Assistant elem = builder.build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant>" +
                "<Language code=\"code\" speechModel=\"speech_model\" transcriptionProvider=\"transcription_provider\" ttsProvider=\"tts_provider\" voice=\"voice\"/>" +
                "<Parameter name=\"name\" value=\"value\"/>" +
            "</Assistant>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithTextNode() {
        Assistant.Builder builder = new Assistant.Builder();

        builder.addText("Hey no tags!");

        Assistant elem = builder.build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant>" +
            "Hey no tags!" +
            "</Assistant>",
            elem.toXml()
        );
    }

    @Test
    public void testMixedContent() {
        GenericNode.Builder child = new GenericNode.Builder("Child");
        child.addText("content");

        Assistant.Builder builder = new Assistant.Builder();

        builder.addText("before");
        builder.addChild(child.build());
        builder.addText("after");

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant>" +
            "before" +
            "<Child>content</Child>" +
            "after" +
            "</Assistant>",
            builder.build().toXml()
        );
    }

    @Test
    public void testElementWithGenericNode() {
        GenericNode.Builder genericBuilder = new GenericNode.Builder("genericTag");
        genericBuilder.addText("Some text");
        GenericNode node = genericBuilder.build();

        Assistant.Builder builder = new Assistant.Builder();
        Assistant elem = builder.addChild(node).build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant>" +
            "<genericTag>" +
            "Some text" +
            "</genericTag>" +
            "</Assistant>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithGenericNodeAttributes() {
        GenericNode.Builder genericBuilder = new GenericNode.Builder("genericTag");
        GenericNode node = genericBuilder.option("key", "value").addText("someText").build();

        Assistant.Builder builder = new Assistant.Builder();
        Assistant elem = builder.addChild(node).build();

        Assert.assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<Assistant>" +
            "<genericTag key=\"value\">" +
            "someText" +
            "</genericTag>" +
            "</Assistant>",
            elem.toXml()
        );
    }

    @Test
    public void testXmlAttributesDeserialization() {
        final Assistant elem = new Assistant.Builder()
            .id("id")
            .language("language")
            .ttsLanguage("tts_language")
            .transcriptionLanguage("transcription_language")
            .ttsProvider("tts_provider")
            .voice("voice")
            .transcriptionProvider("transcription_provider")
            .speechModel("speech_model")
            .profanityFilter(true)
            .dtmfDetection(true)
            .welcomeGreeting("welcome_greeting")
            .partialPrompts(true)
            .interruptible(true)
            .interruptByDtmf(true)
            .welcomeGreetingInterruptible(true)
            .debug(true)
            .build();

        Assert.assertEquals(
            Assistant.Builder.fromXml("<Assistant debug=\"true\" dtmfDetection=\"true\" id=\"id\" interruptByDtmf=\"true\" interruptible=\"true\" language=\"language\" partialPrompts=\"true\" profanityFilter=\"true\" speechModel=\"speech_model\" transcriptionLanguage=\"transcription_language\" transcriptionProvider=\"transcription_provider\" ttsLanguage=\"tts_language\" ttsProvider=\"tts_provider\" voice=\"voice\" welcomeGreeting=\"welcome_greeting\" welcomeGreetingInterruptible=\"true\"/>").build().toXml(),
            elem.toXml()
        );
    }

    @Test
    public void testXmlChildrenDeserialization() {
        final Assistant.Builder builder = new Assistant.Builder();

        builder.language(new Language.Builder()
                    .code("code")
                    .ttsProvider("tts_provider")
                    .voice("voice")
                    .transcriptionProvider("transcription_provider")
                    .speechModel("speech_model")
                    .build());

        builder.parameter(new Parameter.Builder().name("name").value("value").build());

        final Assistant elem = builder.build();

        Assert.assertEquals(
            Assistant.Builder.fromXml("<Assistant>" +
                "<Language code=\"code\" speechModel=\"speech_model\" transcriptionProvider=\"transcription_provider\" ttsProvider=\"tts_provider\" voice=\"voice\"/>" +
                "<Parameter name=\"name\" value=\"value\"/>" +
            "</Assistant>").build().toXml(),
            elem.toXml()
        );
    }

    @Test
    public void testXmlEmptyChildrenDeserialization() {
        final Assistant.Builder builder = new Assistant.Builder();

        builder.language(new Language.Builder().build());

        builder.parameter(new Parameter.Builder().build());

        final Assistant elem = builder.build();

        Assert.assertEquals(
            Assistant.Builder.fromXml("<Assistant>" +
                "<Language/>" +
                "<Parameter/>" +
            "</Assistant>").build().toXml(),
            elem.toXml()
        );
    }
}