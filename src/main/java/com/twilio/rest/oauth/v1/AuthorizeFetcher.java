/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.oauth.v1;

import com.twilio.base.noauth.Fetcher;
import com.twilio.constant.EnumConstants;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Response;
import com.twilio.http.noauth.NoAuthRequest;
import com.twilio.http.noauth.NoAuthTwilioRestClient;
import com.twilio.rest.Domains;

public class AuthorizeFetcher extends Fetcher<Authorize> {

    private String responseType;
    private String clientId;
    private String redirectUri;
    private String scope;
    private String state;

    public AuthorizeFetcher() {}

    public AuthorizeFetcher setResponseType(final String responseType) {
        this.responseType = responseType;
        return this;
    }

    public AuthorizeFetcher setClientId(final String clientId) {
        this.clientId = clientId;
        return this;
    }

    public AuthorizeFetcher setRedirectUri(final String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }

    public AuthorizeFetcher setScope(final String scope) {
        this.scope = scope;
        return this;
    }

    public AuthorizeFetcher setState(final String state) {
        this.state = state;
        return this;
    }

    @Override
    public Authorize fetch(final NoAuthTwilioRestClient client) {
        String path = "/v1/authorize";

        NoAuthRequest request = new NoAuthRequest(
            HttpMethod.GET,
            Domains.OAUTH.toString(),
            path
        );
        addQueryParams(request);
        request.setContentType(EnumConstants.ContentType.FORM_URLENCODED);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException(
                "Authorize fetch failed: Unable to connect to server"
            );
        } else if (
            !NoAuthTwilioRestClient.SUCCESS.test(response.getStatusCode())
        ) {
            RestException restException = RestException.fromJson(
                response.getStream(),
                client.getObjectMapper()
            );
            if (restException == null) {
                throw new ApiException(
                    "Server Error, no content",
                    response.getStatusCode()
                );
            }
            throw new ApiException(restException);
        }

        return Authorize.fromJson(
            response.getStream(),
            client.getObjectMapper()
        );
    }

    private void addQueryParams(final NoAuthRequest request) {
        if (responseType != null) {
            request.addQueryParam("ResponseType", responseType);
        }
        if (clientId != null) {
            request.addQueryParam("ClientId", clientId);
        }
        if (redirectUri != null) {
            request.addQueryParam("RedirectUri", redirectUri);
        }
        if (scope != null) {
            request.addQueryParam("Scope", scope);
        }
        if (state != null) {
            request.addQueryParam("State", state);
        }
    }
}
