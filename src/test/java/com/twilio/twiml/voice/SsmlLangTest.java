/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml.voice;

import com.twilio.twiml.GenericNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Test class for {@link SsmlLang}
 */
public class SsmlLangTest {
    @Test
    public void testEmptyElement() {
        SsmlLang elem = new SsmlLang.Builder().build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang/>",
            elem.toXml()
        );
    }

    @Test
    public void testEmptyElementUrl() {
        SsmlLang elem = new SsmlLang.Builder().build();

        assertEquals("%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3Clang%2F%3E", elem.toUrl());
    }

    @Test
    public void testElementWithParams() {
        SsmlLang elem = new SsmlLang.Builder("words").xmlLang(SsmlLang.XmlLang.ARB).build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang xml:lang=\"arb\">words</lang>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithExtraAttributes() {
        SsmlLang elem = new SsmlLang.Builder().option("foo", "bar").option("a", "b").build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang a=\"b\" foo=\"bar\"/>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithChildren() {
        SsmlLang.Builder builder = new SsmlLang.Builder();

        builder.break_(new SsmlBreak.Builder().strength(SsmlBreak.Strength.NONE).time("time").build());

        builder.emphasis(new SsmlEmphasis.Builder("words").level(SsmlEmphasis.Level.STRONG).build());

        builder.lang(new SsmlLang.Builder("words").xmlLang(SsmlLang.XmlLang.ARB).build());

        builder.p(new SsmlP.Builder("words").build());

        builder.phoneme(new SsmlPhoneme.Builder("words").alphabet(SsmlPhoneme.Alphabet.IPA).ph("ph").build());

        builder.prosody(new SsmlProsody.Builder("words").volume("volume").rate("rate").pitch("pitch").build());

        builder.s(new SsmlS.Builder("words").build());

        builder.sayAs(new SsmlSayAs.Builder("words")
                    .interpretAs(SsmlSayAs.InterpretAs.CHARACTERS)
                    .format(SsmlSayAs.Format.MDY)
                    .build());

        builder.sub(new SsmlSub.Builder("words").alias("alias").build());

        builder.w(new SsmlW.Builder("words").role("role").build());

        SsmlLang elem = builder.build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang>" +
                "<break strength=\"none\" time=\"time\"/>" +
                "<emphasis level=\"strong\">words</emphasis>" +
                "<lang xml:lang=\"arb\">words</lang>" +
                "<p>words</p>" +
                "<phoneme alphabet=\"ipa\" ph=\"ph\">words</phoneme>" +
                "<prosody pitch=\"pitch\" rate=\"rate\" volume=\"volume\">words</prosody>" +
                "<s>words</s>" +
                "<say-as format=\"mdy\" interpret-as=\"characters\">words</say-as>" +
                "<sub alias=\"alias\">words</sub>" +
                "<w role=\"role\">words</w>" +
            "</lang>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithTextNode() {
        SsmlLang.Builder builder = new SsmlLang.Builder();

        builder.addText("Hey no tags!");

        SsmlLang elem = builder.build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang>" +
            "Hey no tags!" +
            "</lang>",
            elem.toXml()
        );
    }

    @Test
    public void testMixedContent() {
        GenericNode.Builder child = new GenericNode.Builder("Child");
        child.addText("content");

        SsmlLang.Builder builder = new SsmlLang.Builder();

        builder.addText("before");
        builder.addChild(child.build());
        builder.addText("after");

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang>" +
            "before" +
            "<Child>content</Child>" +
            "after" +
            "</lang>",
            builder.build().toXml()
        );
    }

    @Test
    public void testElementWithGenericNode() {
        GenericNode.Builder genericBuilder = new GenericNode.Builder("genericTag");
        genericBuilder.addText("Some text");
        GenericNode node = genericBuilder.build();

        SsmlLang.Builder builder = new SsmlLang.Builder();
        SsmlLang elem = builder.addChild(node).build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang>" +
            "<genericTag>" +
            "Some text" +
            "</genericTag>" +
            "</lang>",
            elem.toXml()
        );
    }

    @Test
    public void testElementWithGenericNodeAttributes() {
        GenericNode.Builder genericBuilder = new GenericNode.Builder("genericTag");
        GenericNode node = genericBuilder.option("key", "value").addText("someText").build();

        SsmlLang.Builder builder = new SsmlLang.Builder();
        SsmlLang elem = builder.addChild(node).build();

        assertEquals(
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<lang>" +
            "<genericTag key=\"value\">" +
            "someText" +
            "</genericTag>" +
            "</lang>",
            elem.toXml()
        );
    }

    @Test
    public void testXmlAttributesDeserialization() {
        final SsmlLang elem = new SsmlLang.Builder("words").xmlLang(SsmlLang.XmlLang.ARB).build();

        assertEquals(
            SsmlLang.Builder.fromXml("<lang xml:lang=\"arb\">words</lang>").build().toXml(),
            elem.toXml()
        );
    }

    @Test
    public void testXmlChildrenDeserialization() {
        final SsmlLang.Builder builder = new SsmlLang.Builder();

        builder.break_(new SsmlBreak.Builder().strength(SsmlBreak.Strength.NONE).time("time").build());

        builder.emphasis(new SsmlEmphasis.Builder("words").level(SsmlEmphasis.Level.STRONG).build());

        builder.lang(new SsmlLang.Builder("words").xmlLang(SsmlLang.XmlLang.ARB).build());

        builder.p(new SsmlP.Builder("words").build());

        builder.phoneme(new SsmlPhoneme.Builder("words").alphabet(SsmlPhoneme.Alphabet.IPA).ph("ph").build());

        builder.prosody(new SsmlProsody.Builder("words").volume("volume").rate("rate").pitch("pitch").build());

        builder.s(new SsmlS.Builder("words").build());

        builder.sayAs(new SsmlSayAs.Builder("words")
                    .interpretAs(SsmlSayAs.InterpretAs.CHARACTERS)
                    .format(SsmlSayAs.Format.MDY)
                    .build());

        builder.sub(new SsmlSub.Builder("words").alias("alias").build());

        builder.w(new SsmlW.Builder("words").role("role").build());

        final SsmlLang elem = builder.build();

        assertEquals(
            SsmlLang.Builder.fromXml("<lang>" +
                "<break strength=\"none\" time=\"time\"/>" +
                "<emphasis level=\"strong\">words</emphasis>" +
                "<lang xml:lang=\"arb\">words</lang>" +
                "<p>words</p>" +
                "<phoneme alphabet=\"ipa\" ph=\"ph\">words</phoneme>" +
                "<prosody pitch=\"pitch\" rate=\"rate\" volume=\"volume\">words</prosody>" +
                "<s>words</s>" +
                "<say-as format=\"mdy\" interpret-as=\"characters\">words</say-as>" +
                "<sub alias=\"alias\">words</sub>" +
                "<w role=\"role\">words</w>" +
            "</lang>").build().toXml(),
            elem.toXml()
        );
    }

    @Test
    public void testXmlEmptyChildrenDeserialization() {
        final SsmlLang.Builder builder = new SsmlLang.Builder();

        builder.break_(new SsmlBreak.Builder().build());

        builder.emphasis(new SsmlEmphasis.Builder().build());

        builder.lang(new SsmlLang.Builder().build());

        builder.p(new SsmlP.Builder().build());

        builder.prosody(new SsmlProsody.Builder().build());

        builder.s(new SsmlS.Builder().build());

        builder.w(new SsmlW.Builder().build());

        final SsmlLang elem = builder.build();

        assertEquals(
            SsmlLang.Builder.fromXml("<lang>" +
                "<break/>" +
                "<emphasis/>" +
                "<lang/>" +
                "<p/>" +
                "<prosody/>" +
                "<s/>" +
                "<w/>" +
            "</lang>").build().toXml(),
            elem.toXml()
        );
    }
}
