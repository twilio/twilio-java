/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.assistants.v1.assistant;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.time.ZonedDateTime;
import java.util.Objects;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Feedback extends Resource {

    private static final long serialVersionUID = 81835402394387L;

    @ToString
    public static class AssistantsV1ServiceCreateFeedbackRequest {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("message_id")
        @Getter
        @Setter
        private String messageId;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("score")
        @Getter
        @Setter
        private Float score;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("session_id")
        @Getter
        @Setter
        private String sessionId;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("text")
        @Getter
        @Setter
        private String text;

        public AssistantsV1ServiceCreateFeedbackRequest(
            final String sessionId
        ) {
            this.sessionId = sessionId;
        }

        public static AssistantsV1ServiceCreateFeedbackRequest fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                AssistantsV1ServiceCreateFeedbackRequest.class
            );
        }
    }

    public static FeedbackCreator creator(
        final String pathId,
        final Feedback.AssistantsV1ServiceCreateFeedbackRequest assistantsV1ServiceCreateFeedbackRequest
    ) {
        return new FeedbackCreator(
            pathId,
            assistantsV1ServiceCreateFeedbackRequest
        );
    }

    public static FeedbackReader reader(final String pathId) {
        return new FeedbackReader(pathId);
    }

    /**
     * Converts a JSON String into a Feedback object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Feedback object represented by the provided JSON
     */
    public static Feedback fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Feedback.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Feedback object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Feedback object represented by the provided JSON
     */
    public static Feedback fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Feedback.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String assistantId;
    private final String id;
    private final String accountSid;
    private final String userSid;
    private final String messageId;
    private final Float score;
    private final String sessionId;
    private final String text;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;

    @JsonCreator
    private Feedback(
        @JsonProperty("assistant_id") final String assistantId,
        @JsonProperty("id") final String id,
        @JsonProperty("account_sid") final String accountSid,
        @JsonProperty("user_sid") final String userSid,
        @JsonProperty("message_id") final String messageId,
        @JsonProperty("score") final Float score,
        @JsonProperty("session_id") final String sessionId,
        @JsonProperty("text") final String text,
        @JsonProperty("date_created") final String dateCreated,
        @JsonProperty("date_updated") final String dateUpdated
    ) {
        this.assistantId = assistantId;
        this.id = id;
        this.accountSid = accountSid;
        this.userSid = userSid;
        this.messageId = messageId;
        this.score = score;
        this.sessionId = sessionId;
        this.text = text;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
    }

    public final String getAssistantId() {
        return this.assistantId;
    }

    public final String getId() {
        return this.id;
    }

    public final String getAccountSid() {
        return this.accountSid;
    }

    public final String getUserSid() {
        return this.userSid;
    }

    public final String getMessageId() {
        return this.messageId;
    }

    public final Float getScore() {
        return this.score;
    }

    public final String getSessionId() {
        return this.sessionId;
    }

    public final String getText() {
        return this.text;
    }

    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Feedback other = (Feedback) o;

        return (
            Objects.equals(assistantId, other.assistantId) &&
            Objects.equals(id, other.id) &&
            Objects.equals(accountSid, other.accountSid) &&
            Objects.equals(userSid, other.userSid) &&
            Objects.equals(messageId, other.messageId) &&
            Objects.equals(score, other.score) &&
            Objects.equals(sessionId, other.sessionId) &&
            Objects.equals(text, other.text) &&
            Objects.equals(dateCreated, other.dateCreated) &&
            Objects.equals(dateUpdated, other.dateUpdated)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            assistantId,
            id,
            accountSid,
            userSid,
            messageId,
            score,
            sessionId,
            text,
            dateCreated,
            dateUpdated
        );
    }
}
