/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.lookups.v2;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Bucket extends Resource {

    private static final long serialVersionUID = 277677635778369L;

    @ToString
    public static class RateLimitRequest {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("limit")
        @Getter
        @Setter
        private Integer limit;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("ttl")
        @Getter
        @Setter
        private Integer ttl;

        public RateLimitRequest() {}

        public static RateLimitRequest fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(jsonString, RateLimitRequest.class);
        }
    }

    public static BucketDeleter deleter(
        final String pathField,
        final String pathBucket
    ) {
        return new BucketDeleter(pathField, pathBucket);
    }

    public static BucketFetcher fetcher(
        final String pathField,
        final String pathBucket
    ) {
        return new BucketFetcher(pathField, pathBucket);
    }

    public static BucketUpdater updater(
        final String pathField,
        final String pathBucket
    ) {
        return new BucketUpdater(pathField, pathBucket);
    }

    /**
     * Converts a JSON String into a Bucket object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Bucket object represented by the provided JSON
     */
    public static Bucket fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Bucket.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Bucket object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Bucket object represented by the provided JSON
     */
    public static Bucket fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Bucket.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String field;
    private final Integer limit;
    private final String bucket;
    private final String owner;
    private final Integer ttl;

    @JsonCreator
    private Bucket(
        @JsonProperty("field") final String field,
        @JsonProperty("limit") final Integer limit,
        @JsonProperty("bucket") final String bucket,
        @JsonProperty("owner") final String owner,
        @JsonProperty("ttl") final Integer ttl
    ) {
        this.field = field;
        this.limit = limit;
        this.bucket = bucket;
        this.owner = owner;
        this.ttl = ttl;
    }

    public final String getField() {
        return this.field;
    }

    public final Integer getLimit() {
        return this.limit;
    }

    public final String getBucket() {
        return this.bucket;
    }

    public final String getOwner() {
        return this.owner;
    }

    public final Integer getTtl() {
        return this.ttl;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Bucket other = (Bucket) o;

        return (
            Objects.equals(field, other.field) &&
            Objects.equals(limit, other.limit) &&
            Objects.equals(bucket, other.bucket) &&
            Objects.equals(owner, other.owner) &&
            Objects.equals(ttl, other.ttl)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(field, limit, bucket, owner, ttl);
    }
}
