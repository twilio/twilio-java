/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.lookups.v2;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.time.ZonedDateTime;
import java.util.Objects;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class LookupOverride extends Resource {

    private static final long serialVersionUID = 147188354779019L;

    @ToString
    public static class OverridesRequest {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("line_type")
        @Getter
        @Setter
        private LineTypeEnum lineType;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("reason")
        @Getter
        @Setter
        private String reason;

        public OverridesRequest() {}

        public static OverridesRequest fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(jsonString, OverridesRequest.class);
        }
    }

    public static LookupOverrideCreator creator(
        final String pathField,
        final String pathPhoneNumber
    ) {
        return new LookupOverrideCreator(pathField, pathPhoneNumber);
    }

    public static LookupOverrideDeleter deleter(
        final String pathField,
        final String pathPhoneNumber
    ) {
        return new LookupOverrideDeleter(pathField, pathPhoneNumber);
    }

    public static LookupOverrideFetcher fetcher(
        final String pathField,
        final String pathPhoneNumber
    ) {
        return new LookupOverrideFetcher(pathField, pathPhoneNumber);
    }

    public static LookupOverrideUpdater updater(
        final String pathField,
        final String pathPhoneNumber
    ) {
        return new LookupOverrideUpdater(pathField, pathPhoneNumber);
    }

    /**
     * Converts a JSON String into a LookupOverride object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return LookupOverride object represented by the provided JSON
     */
    public static LookupOverride fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, LookupOverride.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a LookupOverride object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return LookupOverride object represented by the provided JSON
     */
    public static LookupOverride fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, LookupOverride.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String phoneNumber;
    private final LookupOverride.OriginalLineTypeEnum originalLineType;
    private final LookupOverride.OverriddenLineTypeEnum overriddenLineType;
    private final String overrideReason;
    private final ZonedDateTime overrideTimestamp;
    private final String overriddenByAccountSid;

    @JsonCreator
    private LookupOverride(
        @JsonProperty("phone_number") final String phoneNumber,
        @JsonProperty(
            "original_line_type"
        ) final LookupOverride.OriginalLineTypeEnum originalLineType,
        @JsonProperty(
            "overridden_line_type"
        ) final LookupOverride.OverriddenLineTypeEnum overriddenLineType,
        @JsonProperty("override_reason") final String overrideReason,
        @JsonProperty("override_timestamp") final String overrideTimestamp,
        @JsonProperty(
            "overridden_by_account_sid"
        ) final String overriddenByAccountSid
    ) {
        this.phoneNumber = phoneNumber;
        this.originalLineType = originalLineType;
        this.overriddenLineType = overriddenLineType;
        this.overrideReason = overrideReason;
        this.overrideTimestamp =
            DateConverter.iso8601DateTimeFromString(overrideTimestamp);
        this.overriddenByAccountSid = overriddenByAccountSid;
    }

    public final String getPhoneNumber() {
        return this.phoneNumber;
    }

    public final LookupOverride.OriginalLineTypeEnum getOriginalLineType() {
        return this.originalLineType;
    }

    public final LookupOverride.OverriddenLineTypeEnum getOverriddenLineType() {
        return this.overriddenLineType;
    }

    public final String getOverrideReason() {
        return this.overrideReason;
    }

    public final ZonedDateTime getOverrideTimestamp() {
        return this.overrideTimestamp;
    }

    public final String getOverriddenByAccountSid() {
        return this.overriddenByAccountSid;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        LookupOverride other = (LookupOverride) o;

        return (
            Objects.equals(phoneNumber, other.phoneNumber) &&
            Objects.equals(originalLineType, other.originalLineType) &&
            Objects.equals(overriddenLineType, other.overriddenLineType) &&
            Objects.equals(overrideReason, other.overrideReason) &&
            Objects.equals(overrideTimestamp, other.overrideTimestamp) &&
            Objects.equals(overriddenByAccountSid, other.overriddenByAccountSid)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            phoneNumber,
            originalLineType,
            overriddenLineType,
            overrideReason,
            overrideTimestamp,
            overriddenByAccountSid
        );
    }

    public enum OriginalLineTypeEnum {
        MOBILE("mobile"),
        LANDLINE("landline"),
        TOLLFREE("tollFree"),
        FIXEDVOIP("fixedVoip"),
        NONFIXEDVOIP("nonFixedVoip"),
        PERSONAL("personal"),
        PREMIUM("premium"),
        VOICEMAIL("voicemail"),
        SHAREDCOST("sharedCost"),
        UAN("uan"),
        PAGER("pager"),
        UNKNOWN("unknown");

        private final String value;

        private OriginalLineTypeEnum(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static OriginalLineTypeEnum forValue(final String value) {
            return Promoter.enumFromString(
                value,
                OriginalLineTypeEnum.values()
            );
        }
    }

    public enum OverriddenLineTypeEnum {
        MOBILE("mobile"),
        LANDLINE("landline"),
        TOLLFREE("tollFree"),
        FIXEDVOIP("fixedVoip"),
        NONFIXEDVOIP("nonFixedVoip"),
        PERSONAL("personal"),
        PREMIUM("premium"),
        VOICEMAIL("voicemail"),
        SHAREDCOST("sharedCost"),
        UAN("uan"),
        PAGER("pager"),
        UNKNOWN("unknown");

        private final String value;

        private OverriddenLineTypeEnum(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static OverriddenLineTypeEnum forValue(final String value) {
            return Promoter.enumFromString(
                value,
                OverriddenLineTypeEnum.values()
            );
        }
    }

    public enum LineTypeEnum {
        MOBILE("mobile"),
        LANDLINE("landline"),
        TOLLFREE("tollFree"),
        FIXEDVOIP("fixedVoip"),
        NONFIXEDVOIP("nonFixedVoip"),
        PERSONAL("personal"),
        PREMIUM("premium"),
        VOICEMAIL("voicemail"),
        SHAREDCOST("sharedCost"),
        UAN("uan"),
        PAGER("pager"),
        UNKNOWN("unknown");

        private final String value;

        private LineTypeEnum(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static LineTypeEnum forValue(final String value) {
            return Promoter.enumFromString(value, LineTypeEnum.values());
        }
    }
}
