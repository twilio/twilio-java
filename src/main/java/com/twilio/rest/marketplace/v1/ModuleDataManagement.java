/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.marketplace.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Map;
import java.util.Map;
import java.util.Objects;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class ModuleDataManagement extends Resource {

    private static final long serialVersionUID = 180018877375089L;

    public static ModuleDataManagementFetcher fetcher(final String pathSid) {
        return new ModuleDataManagementFetcher(pathSid);
    }

    public static ModuleDataManagementUpdater updater(final String pathSid) {
        return new ModuleDataManagementUpdater(pathSid);
    }

    /**
     * Converts a JSON String into a ModuleDataManagement object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return ModuleDataManagement object represented by the provided JSON
     */
    public static ModuleDataManagement fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ModuleDataManagement.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a ModuleDataManagement object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return ModuleDataManagement object represented by the provided JSON
     */
    public static ModuleDataManagement fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ModuleDataManagement.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final URI url;
    private final String sid;
    private final Map<String, Object> description;
    private final Map<String, Object> support;
    private final Map<String, Object> policies;
    private final Map<String, Object> moduleInfo;
    private final Map<String, Object> documentation;

    @JsonCreator
    private ModuleDataManagement(
        @JsonProperty("url") final URI url,
        @JsonProperty("sid") final String sid,
        @JsonProperty("description") final Map<String, Object> description,
        @JsonProperty("support") final Map<String, Object> support,
        @JsonProperty("policies") final Map<String, Object> policies,
        @JsonProperty("module_info") final Map<String, Object> moduleInfo,
        @JsonProperty("documentation") final Map<String, Object> documentation
    ) {
        this.url = url;
        this.sid = sid;
        this.description = description;
        this.support = support;
        this.policies = policies;
        this.moduleInfo = moduleInfo;
        this.documentation = documentation;
    }

    public final URI getUrl() {
        return this.url;
    }

    public final String getSid() {
        return this.sid;
    }

    public final Map<String, Object> getDescription() {
        return this.description;
    }

    public final Map<String, Object> getSupport() {
        return this.support;
    }

    public final Map<String, Object> getPolicies() {
        return this.policies;
    }

    public final Map<String, Object> getModuleInfo() {
        return this.moduleInfo;
    }

    public final Map<String, Object> getDocumentation() {
        return this.documentation;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ModuleDataManagement other = (ModuleDataManagement) o;

        return (
            Objects.equals(url, other.url) &&
            Objects.equals(sid, other.sid) &&
            Objects.equals(description, other.description) &&
            Objects.equals(support, other.support) &&
            Objects.equals(policies, other.policies) &&
            Objects.equals(moduleInfo, other.moduleInfo) &&
            Objects.equals(documentation, other.documentation)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            sid,
            description,
            support,
            policies,
            moduleInfo,
            documentation
        );
    }
}
