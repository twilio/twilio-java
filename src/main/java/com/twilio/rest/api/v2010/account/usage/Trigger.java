/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.api.v2010.account.usage;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.http.HttpMethod;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.Objects;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Trigger extends Resource {

    private static final long serialVersionUID = 156058914793532L;

    public static TriggerCreator creator(
        final URI callbackUrl,
        final String triggerValue,
        final String usageCategory
    ) {
        return new TriggerCreator(callbackUrl, triggerValue, usageCategory);
    }

    public static TriggerCreator creator(
        final String pathAccountSid,
        final URI callbackUrl,
        final String triggerValue,
        final String usageCategory
    ) {
        return new TriggerCreator(
            pathAccountSid,
            callbackUrl,
            triggerValue,
            usageCategory
        );
    }

    public static TriggerDeleter deleter(final String pathSid) {
        return new TriggerDeleter(pathSid);
    }

    public static TriggerDeleter deleter(
        final String pathAccountSid,
        final String pathSid
    ) {
        return new TriggerDeleter(pathAccountSid, pathSid);
    }

    public static TriggerFetcher fetcher(final String pathSid) {
        return new TriggerFetcher(pathSid);
    }

    public static TriggerFetcher fetcher(
        final String pathAccountSid,
        final String pathSid
    ) {
        return new TriggerFetcher(pathAccountSid, pathSid);
    }

    public static TriggerReader reader() {
        return new TriggerReader();
    }

    public static TriggerReader reader(final String pathAccountSid) {
        return new TriggerReader(pathAccountSid);
    }

    public static TriggerUpdater updater(final String pathSid) {
        return new TriggerUpdater(pathSid);
    }

    public static TriggerUpdater updater(
        final String pathAccountSid,
        final String pathSid
    ) {
        return new TriggerUpdater(pathAccountSid, pathSid);
    }

    /**
     * Converts a JSON String into a Trigger object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Trigger object represented by the provided JSON
     */
    public static Trigger fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Trigger.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Trigger object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Trigger object represented by the provided JSON
     */
    public static Trigger fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Trigger.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final String apiVersion;
    private final HttpMethod callbackMethod;
    private final URI callbackUrl;
    private final String currentValue;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateFired;
    private final ZonedDateTime dateUpdated;
    private final String friendlyName;
    private final Trigger.Recurring recurring;
    private final String sid;
    private final Trigger.TriggerField triggerBy;
    private final String triggerValue;
    private final String uri;
    private final String usageCategory;
    private final String usageRecordUri;

    @JsonCreator
    private Trigger(
        @JsonProperty("account_sid") final String accountSid,
        @JsonProperty("api_version") final String apiVersion,
        @JsonProperty("callback_method") final HttpMethod callbackMethod,
        @JsonProperty("callback_url") final URI callbackUrl,
        @JsonProperty("current_value") final String currentValue,
        @JsonProperty("date_created") final String dateCreated,
        @JsonProperty("date_fired") final String dateFired,
        @JsonProperty("date_updated") final String dateUpdated,
        @JsonProperty("friendly_name") final String friendlyName,
        @JsonProperty("recurring") final Trigger.Recurring recurring,
        @JsonProperty("sid") final String sid,
        @JsonProperty("trigger_by") final Trigger.TriggerField triggerBy,
        @JsonProperty("trigger_value") final String triggerValue,
        @JsonProperty("uri") final String uri,
        @JsonProperty("usage_category") final String usageCategory,
        @JsonProperty("usage_record_uri") final String usageRecordUri
    ) {
        this.accountSid = accountSid;
        this.apiVersion = apiVersion;
        this.callbackMethod = callbackMethod;
        this.callbackUrl = callbackUrl;
        this.currentValue = currentValue;
        this.dateCreated = DateConverter.rfc2822DateTimeFromString(dateCreated);
        this.dateFired = DateConverter.rfc2822DateTimeFromString(dateFired);
        this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
        this.friendlyName = friendlyName;
        this.recurring = recurring;
        this.sid = sid;
        this.triggerBy = triggerBy;
        this.triggerValue = triggerValue;
        this.uri = uri;
        this.usageCategory = usageCategory;
        this.usageRecordUri = usageRecordUri;
    }

    public final String getAccountSid() {
        return this.accountSid;
    }

    public final String getApiVersion() {
        return this.apiVersion;
    }

    public final HttpMethod getCallbackMethod() {
        return this.callbackMethod;
    }

    public final URI getCallbackUrl() {
        return this.callbackUrl;
    }

    public final String getCurrentValue() {
        return this.currentValue;
    }

    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    public final ZonedDateTime getDateFired() {
        return this.dateFired;
    }

    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    public final String getFriendlyName() {
        return this.friendlyName;
    }

    public final Trigger.Recurring getRecurring() {
        return this.recurring;
    }

    public final String getSid() {
        return this.sid;
    }

    public final Trigger.TriggerField getTriggerBy() {
        return this.triggerBy;
    }

    public final String getTriggerValue() {
        return this.triggerValue;
    }

    public final String getUri() {
        return this.uri;
    }

    public final String getUsageCategory() {
        return this.usageCategory;
    }

    public final String getUsageRecordUri() {
        return this.usageRecordUri;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Trigger other = (Trigger) o;

        return (
            Objects.equals(accountSid, other.accountSid) &&
            Objects.equals(apiVersion, other.apiVersion) &&
            Objects.equals(callbackMethod, other.callbackMethod) &&
            Objects.equals(callbackUrl, other.callbackUrl) &&
            Objects.equals(currentValue, other.currentValue) &&
            Objects.equals(dateCreated, other.dateCreated) &&
            Objects.equals(dateFired, other.dateFired) &&
            Objects.equals(dateUpdated, other.dateUpdated) &&
            Objects.equals(friendlyName, other.friendlyName) &&
            Objects.equals(recurring, other.recurring) &&
            Objects.equals(sid, other.sid) &&
            Objects.equals(triggerBy, other.triggerBy) &&
            Objects.equals(triggerValue, other.triggerValue) &&
            Objects.equals(uri, other.uri) &&
            Objects.equals(usageCategory, other.usageCategory) &&
            Objects.equals(usageRecordUri, other.usageRecordUri)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            accountSid,
            apiVersion,
            callbackMethod,
            callbackUrl,
            currentValue,
            dateCreated,
            dateFired,
            dateUpdated,
            friendlyName,
            recurring,
            sid,
            triggerBy,
            triggerValue,
            uri,
            usageCategory,
            usageRecordUri
        );
    }

    public enum Recurring {
        DAILY("daily"),
        MONTHLY("monthly"),
        YEARLY("yearly"),
        ALLTIME("alltime");

        private final String value;

        private Recurring(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static Recurring forValue(final String value) {
            return Promoter.enumFromString(value, Recurring.values());
        }
    }

    public enum TriggerField {
        COUNT("count"),
        USAGE("usage"),
        PRICE("price");

        private final String value;

        private TriggerField(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static TriggerField forValue(final String value) {
            return Promoter.enumFromString(value, TriggerField.values());
        }
    }
}
