/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.flexapi.v1.pluginconfiguration;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.Objects;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class ConfiguredPlugin extends Resource {

    private static final long serialVersionUID = 274363191205170L;

    public static ConfiguredPluginFetcher fetcher(
        final String pathConfigurationSid,
        final String pathPluginSid
    ) {
        return new ConfiguredPluginFetcher(pathConfigurationSid, pathPluginSid);
    }

    public static ConfiguredPluginReader reader(
        final String pathConfigurationSid
    ) {
        return new ConfiguredPluginReader(pathConfigurationSid);
    }

    /**
     * Converts a JSON String into a ConfiguredPlugin object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return ConfiguredPlugin object represented by the provided JSON
     */
    public static ConfiguredPlugin fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ConfiguredPlugin.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a ConfiguredPlugin object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return ConfiguredPlugin object represented by the provided JSON
     */
    public static ConfiguredPlugin fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ConfiguredPlugin.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final String configurationSid;
    private final String pluginSid;
    private final String pluginVersionSid;
    private final Integer phase;
    private final String pluginUrl;
    private final String uniqueName;
    private final String friendlyName;
    private final String description;
    private final Boolean pluginArchived;
    private final String version;
    private final String changelog;
    private final Boolean pluginVersionArchived;
    private final Boolean _private;
    private final ZonedDateTime dateCreated;
    private final URI url;

    @JsonCreator
    private ConfiguredPlugin(
        @JsonProperty("account_sid") final String accountSid,
        @JsonProperty("configuration_sid") final String configurationSid,
        @JsonProperty("plugin_sid") final String pluginSid,
        @JsonProperty("plugin_version_sid") final String pluginVersionSid,
        @JsonProperty("phase") final Integer phase,
        @JsonProperty("plugin_url") final String pluginUrl,
        @JsonProperty("unique_name") final String uniqueName,
        @JsonProperty("friendly_name") final String friendlyName,
        @JsonProperty("description") final String description,
        @JsonProperty("plugin_archived") final Boolean pluginArchived,
        @JsonProperty("version") final String version,
        @JsonProperty("changelog") final String changelog,
        @JsonProperty(
            "plugin_version_archived"
        ) final Boolean pluginVersionArchived,
        @JsonProperty("_private") final Boolean _private,
        @JsonProperty("date_created") final String dateCreated,
        @JsonProperty("url") final URI url
    ) {
        this.accountSid = accountSid;
        this.configurationSid = configurationSid;
        this.pluginSid = pluginSid;
        this.pluginVersionSid = pluginVersionSid;
        this.phase = phase;
        this.pluginUrl = pluginUrl;
        this.uniqueName = uniqueName;
        this.friendlyName = friendlyName;
        this.description = description;
        this.pluginArchived = pluginArchived;
        this.version = version;
        this.changelog = changelog;
        this.pluginVersionArchived = pluginVersionArchived;
        this._private = _private;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.url = url;
    }

    public final String getAccountSid() {
        return this.accountSid;
    }

    public final String getConfigurationSid() {
        return this.configurationSid;
    }

    public final String getPluginSid() {
        return this.pluginSid;
    }

    public final String getPluginVersionSid() {
        return this.pluginVersionSid;
    }

    public final Integer getPhase() {
        return this.phase;
    }

    public final String getPluginUrl() {
        return this.pluginUrl;
    }

    public final String getUniqueName() {
        return this.uniqueName;
    }

    public final String getFriendlyName() {
        return this.friendlyName;
    }

    public final String getDescription() {
        return this.description;
    }

    public final Boolean getPluginArchived() {
        return this.pluginArchived;
    }

    public final String getVersion() {
        return this.version;
    }

    public final String getChangelog() {
        return this.changelog;
    }

    public final Boolean getPluginVersionArchived() {
        return this.pluginVersionArchived;
    }

    public final Boolean get_private() {
        return this._private;
    }

    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ConfiguredPlugin other = (ConfiguredPlugin) o;

        return (
            Objects.equals(accountSid, other.accountSid) &&
            Objects.equals(configurationSid, other.configurationSid) &&
            Objects.equals(pluginSid, other.pluginSid) &&
            Objects.equals(pluginVersionSid, other.pluginVersionSid) &&
            Objects.equals(phase, other.phase) &&
            Objects.equals(pluginUrl, other.pluginUrl) &&
            Objects.equals(uniqueName, other.uniqueName) &&
            Objects.equals(friendlyName, other.friendlyName) &&
            Objects.equals(description, other.description) &&
            Objects.equals(pluginArchived, other.pluginArchived) &&
            Objects.equals(version, other.version) &&
            Objects.equals(changelog, other.changelog) &&
            Objects.equals(
                pluginVersionArchived,
                other.pluginVersionArchived
            ) &&
            Objects.equals(_private, other._private) &&
            Objects.equals(dateCreated, other.dateCreated) &&
            Objects.equals(url, other.url)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            accountSid,
            configurationSid,
            pluginSid,
            pluginVersionSid,
            phase,
            pluginUrl,
            uniqueName,
            friendlyName,
            description,
            pluginArchived,
            version,
            changelog,
            pluginVersionArchived,
            _private,
            dateCreated,
            url
        );
    }
}
