/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.assistants.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import java.util.Map;
import java.util.Objects;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Assistant extends Resource {

    private static final long serialVersionUID = 5177924616338L;

    @ToString
    public static class AssistantsV1ServiceCustomerAi {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("perception_engine_enabled")
        @Getter
        @Setter
        private Boolean perceptionEngineEnabled;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("personalization_engine_enabled")
        @Getter
        @Setter
        private Boolean personalizationEngineEnabled;

        public static AssistantsV1ServiceCustomerAi fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                AssistantsV1ServiceCustomerAi.class
            );
        }
    }

    @ToString
    public static class AssistantsV1ServiceSegmentCredential {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("profile_api_key")
        @Getter
        @Setter
        private String profileApiKey;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("space_id")
        @Getter
        @Setter
        private String spaceId;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("write_key")
        @Getter
        @Setter
        private String writeKey;

        public static AssistantsV1ServiceSegmentCredential fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                AssistantsV1ServiceSegmentCredential.class
            );
        }
    }

    @ToString
    public static class AssistantsV1ServiceCreateAssistantRequest {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("customer_ai")
        @Getter
        @Setter
        private AssistantsV1ServiceCustomerAi customerAi;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("name")
        @Getter
        @Setter
        private String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("owner")
        @Getter
        @Setter
        private String owner;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("personality_prompt")
        @Getter
        @Setter
        private String personalityPrompt;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("segment_credential")
        @Getter
        @Setter
        private AssistantsV1ServiceSegmentCredential segmentCredential;

        public AssistantsV1ServiceCreateAssistantRequest() {}

        public static AssistantsV1ServiceCreateAssistantRequest fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                AssistantsV1ServiceCreateAssistantRequest.class
            );
        }
    }

    @ToString
    public static class AssistantsV1ServiceUpdateAssistantRequest {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("customer_ai")
        @Getter
        @Setter
        private AssistantsV1ServiceCustomerAi customerAi;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("name")
        @Getter
        @Setter
        private String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("owner")
        @Getter
        @Setter
        private String owner;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("personality_prompt")
        @Getter
        @Setter
        private String personalityPrompt;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("segment_credential")
        @Getter
        @Setter
        private AssistantsV1ServiceSegmentCredential segmentCredential;

        public AssistantsV1ServiceUpdateAssistantRequest() {}

        public static AssistantsV1ServiceUpdateAssistantRequest fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                AssistantsV1ServiceUpdateAssistantRequest.class
            );
        }
    }

    @ToString
    public static class AssistantsV1ServiceKnowledge {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("description")
        @Getter
        @Setter
        private String description;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("id")
        @Getter
        @Setter
        private String id;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("account_sid")
        @Getter
        @Setter
        private String accountSid;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("knowledge_source_details")
        @Getter
        @Setter
        private Map<String, Object> knowledgeSourceDetails;

        public String getKnowledgeSourceDetails() {
            return Converter.mapToJson(knowledgeSourceDetails);
        }

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("name")
        @Getter
        @Setter
        private String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("status")
        @Getter
        @Setter
        private String status;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("type")
        @Getter
        @Setter
        private String type;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("url")
        @Getter
        @Setter
        private String url;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("date_created")
        @Getter
        @Setter
        private ZonedDateTime dateCreated;

        public String getDateCreated() {
            return dateCreated.toInstant().toString();
        }

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("date_updated")
        @Getter
        @Setter
        private ZonedDateTime dateUpdated;

        public String getDateUpdated() {
            return dateUpdated.toInstant().toString();
        }

        public static AssistantsV1ServiceKnowledge fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                AssistantsV1ServiceKnowledge.class
            );
        }
    }

    @ToString
    public static class AssistantsV1ServiceTool {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("account_sid")
        @Getter
        @Setter
        private String accountSid;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("description")
        @Getter
        @Setter
        private String description;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("enabled")
        @Getter
        @Setter
        private Boolean enabled;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("id")
        @Getter
        @Setter
        private String id;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("meta")
        @Getter
        @Setter
        private Map<String, Object> meta;

        public String getMeta() {
            return Converter.mapToJson(meta);
        }

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("name")
        @Getter
        @Setter
        private String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("requires_auth")
        @Getter
        @Setter
        private Boolean requiresAuth;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("type")
        @Getter
        @Setter
        private String type;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("url")
        @Getter
        @Setter
        private String url;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("date_created")
        @Getter
        @Setter
        private ZonedDateTime dateCreated;

        public String getDateCreated() {
            return dateCreated.toInstant().toString();
        }

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("date_updated")
        @Getter
        @Setter
        private ZonedDateTime dateUpdated;

        public String getDateUpdated() {
            return dateUpdated.toInstant().toString();
        }

        public static AssistantsV1ServiceTool fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(jsonString, AssistantsV1ServiceTool.class);
        }
    }

    public static AssistantCreator creator(
        final Assistant.AssistantsV1ServiceCreateAssistantRequest assistantsV1ServiceCreateAssistantRequest
    ) {
        return new AssistantCreator(assistantsV1ServiceCreateAssistantRequest);
    }

    public static AssistantDeleter deleter(final String pathId) {
        return new AssistantDeleter(pathId);
    }

    public static AssistantFetcher fetcher(final String pathId) {
        return new AssistantFetcher(pathId);
    }

    public static AssistantReader reader() {
        return new AssistantReader();
    }

    public static AssistantUpdater updater(final String pathId) {
        return new AssistantUpdater(pathId);
    }

    /**
     * Converts a JSON String into a Assistant object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Assistant object represented by the provided JSON
     */
    public static Assistant fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Assistant.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Assistant object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Assistant object represented by the provided JSON
     */
    public static Assistant fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Assistant.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final Map<String, Object> customerAi;
    private final String id;
    private final String model;
    private final String name;
    private final String owner;
    private final String url;
    private final String personalityPrompt;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;
    private final List<AssistantsV1ServiceKnowledge> knowledge;
    private final List<AssistantsV1ServiceTool> tools;

    @JsonCreator
    private Assistant(
        @JsonProperty("account_sid") final String accountSid,
        @JsonProperty("customer_ai") final Map<String, Object> customerAi,
        @JsonProperty("id") final String id,
        @JsonProperty("model") final String model,
        @JsonProperty("name") final String name,
        @JsonProperty("owner") final String owner,
        @JsonProperty("url") final String url,
        @JsonProperty("personality_prompt") final String personalityPrompt,
        @JsonProperty("date_created") final String dateCreated,
        @JsonProperty("date_updated") final String dateUpdated,
        @JsonProperty("knowledge") final List<
            AssistantsV1ServiceKnowledge
        > knowledge,
        @JsonProperty("tools") final List<AssistantsV1ServiceTool> tools
    ) {
        this.accountSid = accountSid;
        this.customerAi = customerAi;
        this.id = id;
        this.model = model;
        this.name = name;
        this.owner = owner;
        this.url = url;
        this.personalityPrompt = personalityPrompt;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
        this.knowledge = knowledge;
        this.tools = tools;
    }

    public final String getAccountSid() {
        return this.accountSid;
    }

    public final Map<String, Object> getCustomerAi() {
        return this.customerAi;
    }

    public final String getId() {
        return this.id;
    }

    public final String getModel() {
        return this.model;
    }

    public final String getName() {
        return this.name;
    }

    public final String getOwner() {
        return this.owner;
    }

    public final String getUrl() {
        return this.url;
    }

    public final String getPersonalityPrompt() {
        return this.personalityPrompt;
    }

    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    public final List<AssistantsV1ServiceKnowledge> getKnowledge() {
        return this.knowledge;
    }

    public final List<AssistantsV1ServiceTool> getTools() {
        return this.tools;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Assistant other = (Assistant) o;

        return (
            Objects.equals(accountSid, other.accountSid) &&
            Objects.equals(customerAi, other.customerAi) &&
            Objects.equals(id, other.id) &&
            Objects.equals(model, other.model) &&
            Objects.equals(name, other.name) &&
            Objects.equals(owner, other.owner) &&
            Objects.equals(url, other.url) &&
            Objects.equals(personalityPrompt, other.personalityPrompt) &&
            Objects.equals(dateCreated, other.dateCreated) &&
            Objects.equals(dateUpdated, other.dateUpdated) &&
            Objects.equals(knowledge, other.knowledge) &&
            Objects.equals(tools, other.tools)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            accountSid,
            customerAi,
            id,
            model,
            name,
            owner,
            url,
            personalityPrompt,
            dateCreated,
            dateUpdated,
            knowledge,
            tools
        );
    }
}
