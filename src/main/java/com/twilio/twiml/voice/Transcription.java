/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml.voice;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.twilio.twiml.TwiML;
import com.twilio.twiml.TwiMLException;

import java.util.HashMap;
import java.util.Map;

/**
 * TwiML wrapper for {@code <Transcription>}
 */
@JsonDeserialize(builder = Transcription.Builder.class)
public class Transcription extends TwiML {
    public enum Track {
        INBOUND_TRACK("inbound_track"),
        OUTBOUND_TRACK("outbound_track"),
        BOTH_TRACKS("both_tracks");

        private final String value;

        private Track(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    public enum StatusCallbackMethod {
        GET("GET"),
        POST("POST");

        private final String value;

        private StatusCallbackMethod(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    private final String name;
    private final Transcription.Track track;
    private final String statusCallbackUrl;
    private final Transcription.StatusCallbackMethod statusCallbackMethod;
    private final String inboundTrackLabel;
    private final String outboundTrackLabel;
    private final Boolean partialResults;
    private final String languageCode;
    private final String transcriptionEngine;
    private final Boolean profanityFilter;
    private final String speechModel;
    private final String hints;
    private final Boolean enableAutomaticPunctuation;

    /**
     * For XML Serialization/Deserialization
     */
    private Transcription() {
        this(new Builder());
    }

    /**
     * Create a new {@code <Transcription>} element
     */
    private Transcription(Builder b) {
        super("Transcription", b);
        this.name = b.name;
        this.track = b.track;
        this.statusCallbackUrl = b.statusCallbackUrl;
        this.statusCallbackMethod = b.statusCallbackMethod;
        this.inboundTrackLabel = b.inboundTrackLabel;
        this.outboundTrackLabel = b.outboundTrackLabel;
        this.partialResults = b.partialResults;
        this.languageCode = b.languageCode;
        this.transcriptionEngine = b.transcriptionEngine;
        this.profanityFilter = b.profanityFilter;
        this.speechModel = b.speechModel;
        this.hints = b.hints;
        this.enableAutomaticPunctuation = b.enableAutomaticPunctuation;
    }

    /**
     * Attributes to set on the generated XML element
     *
     * @return A Map of attribute keys to values
     */
    protected Map<String, String> getElementAttributes() {
        // Preserve order of attributes
        Map<String, String> attrs = new HashMap<>();

        if (this.getName() != null) {
            attrs.put("name", this.getName());
        }
        if (this.getTrack() != null) {
            attrs.put("track", this.getTrack().toString());
        }
        if (this.getStatusCallbackUrl() != null) {
            attrs.put("statusCallbackUrl", this.getStatusCallbackUrl());
        }
        if (this.getStatusCallbackMethod() != null) {
            attrs.put("statusCallbackMethod", this.getStatusCallbackMethod().toString());
        }
        if (this.getInboundTrackLabel() != null) {
            attrs.put("inboundTrackLabel", this.getInboundTrackLabel());
        }
        if (this.getOutboundTrackLabel() != null) {
            attrs.put("outboundTrackLabel", this.getOutboundTrackLabel());
        }
        if (this.isPartialResults() != null) {
            attrs.put("partialResults", this.isPartialResults().toString());
        }
        if (this.getLanguageCode() != null) {
            attrs.put("languageCode", this.getLanguageCode());
        }
        if (this.getTranscriptionEngine() != null) {
            attrs.put("transcriptionEngine", this.getTranscriptionEngine());
        }
        if (this.isProfanityFilter() != null) {
            attrs.put("profanityFilter", this.isProfanityFilter().toString());
        }
        if (this.getSpeechModel() != null) {
            attrs.put("speechModel", this.getSpeechModel());
        }
        if (this.getHints() != null) {
            attrs.put("hints", this.getHints());
        }
        if (this.isEnableAutomaticPunctuation() != null) {
            attrs.put("enableAutomaticPunctuation", this.isEnableAutomaticPunctuation().toString());
        }

        return attrs;
    }

    /**
     * Friendly name given to the Transcription
     *
     * @return Friendly name given to the Transcription
     */
    public String getName() {
        return name;
    }

    /**
     * Track to be analyze by the provider
     *
     * @return Track to be analyze by the provider
     */
    public Transcription.Track getTrack() {
        return track;
    }

    /**
     * Status Callback URL
     *
     * @return Status Callback URL
     */
    public String getStatusCallbackUrl() {
        return statusCallbackUrl;
    }

    /**
     * Status Callback URL method
     *
     * @return Status Callback URL method
     */
    public Transcription.StatusCallbackMethod getStatusCallbackMethod() {
        return statusCallbackMethod;
    }

    /**
     * Friendly name given to the Inbound Track
     *
     * @return Friendly name given to the Inbound Track
     */
    public String getInboundTrackLabel() {
        return inboundTrackLabel;
    }

    /**
     * Friendly name given to the Outbound Track Label
     *
     * @return Friendly name given to the Outbound Track Label
     */
    public String getOutboundTrackLabel() {
        return outboundTrackLabel;
    }

    /**
     * Indicates if partial results are going to be send to the customer
     *
     * @return Indicates if partial results are going to be send to the customer
     */
    public Boolean isPartialResults() {
        return partialResults;
    }

    /**
     * Language Code used by the transcription engine
     *
     * @return Language Code used by the transcription engine
     */
    public String getLanguageCode() {
        return languageCode;
    }

    /**
     * Transcription Engine to be used
     *
     * @return Transcription Engine to be used
     */
    public String getTranscriptionEngine() {
        return transcriptionEngine;
    }

    /**
     * Enable Profanity Filter
     *
     * @return Enable Profanity Filter
     */
    public Boolean isProfanityFilter() {
        return profanityFilter;
    }

    /**
     * Speech Model used by the transcription engine
     *
     * @return Speech Model used by the transcription engine
     */
    public String getSpeechModel() {
        return speechModel;
    }

    /**
     * Hints to be provided to the transcription engine
     *
     * @return Hints to be provided to the transcription engine
     */
    public String getHints() {
        return hints;
    }

    /**
     * Enable Automatic Punctuation
     *
     * @return Enable Automatic Punctuation
     */
    public Boolean isEnableAutomaticPunctuation() {
        return enableAutomaticPunctuation;
    }

    /**
     * Create a new {@code <Transcription>} element
     */
    @JsonPOJOBuilder(withPrefix = "")
    public static class Builder extends TwiML.Builder<Builder> {
        /**
         * Create and return a {@code <Transcription.Builder>} from an XML string
         */
        public static Builder fromXml(final String xml) throws TwiMLException {
            try {
                return OBJECT_MAPPER.readValue(xml, Builder.class);
            } catch (final JsonProcessingException jpe) {
                throw new TwiMLException(
                    "Failed to deserialize a Transcription.Builder from the provided XML string: " + jpe.getMessage());
            } catch (final Exception e) {
                throw new TwiMLException("Unhandled exception: " + e.getMessage());
            }
        }

        private String name;
        private Transcription.Track track;
        private String statusCallbackUrl;
        private Transcription.StatusCallbackMethod statusCallbackMethod;
        private String inboundTrackLabel;
        private String outboundTrackLabel;
        private Boolean partialResults;
        private String languageCode;
        private String transcriptionEngine;
        private Boolean profanityFilter;
        private String speechModel;
        private String hints;
        private Boolean enableAutomaticPunctuation;

        /**
         * Friendly name given to the Transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "name")
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Track to be analyze by the provider
         */
        @JacksonXmlProperty(isAttribute = true, localName = "track")
        public Builder track(Transcription.Track track) {
            this.track = track;
            return this;
        }

        /**
         * Status Callback URL
         */
        @JacksonXmlProperty(isAttribute = true, localName = "statusCallbackUrl")
        public Builder statusCallbackUrl(String statusCallbackUrl) {
            this.statusCallbackUrl = statusCallbackUrl;
            return this;
        }

        /**
         * Status Callback URL method
         */
        @JacksonXmlProperty(isAttribute = true, localName = "statusCallbackMethod")
        public Builder statusCallbackMethod(Transcription.StatusCallbackMethod statusCallbackMethod) {
            this.statusCallbackMethod = statusCallbackMethod;
            return this;
        }

        /**
         * Friendly name given to the Inbound Track
         */
        @JacksonXmlProperty(isAttribute = true, localName = "inboundTrackLabel")
        public Builder inboundTrackLabel(String inboundTrackLabel) {
            this.inboundTrackLabel = inboundTrackLabel;
            return this;
        }

        /**
         * Friendly name given to the Outbound Track Label
         */
        @JacksonXmlProperty(isAttribute = true, localName = "outboundTrackLabel")
        public Builder outboundTrackLabel(String outboundTrackLabel) {
            this.outboundTrackLabel = outboundTrackLabel;
            return this;
        }

        /**
         * Indicates if partial results are going to be send to the customer
         */
        @JacksonXmlProperty(isAttribute = true, localName = "partialResults")
        public Builder partialResults(Boolean partialResults) {
            this.partialResults = partialResults;
            return this;
        }

        /**
         * Language Code used by the transcription engine
         */
        @JacksonXmlProperty(isAttribute = true, localName = "languageCode")
        public Builder languageCode(String languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        /**
         * Transcription Engine to be used
         */
        @JacksonXmlProperty(isAttribute = true, localName = "transcriptionEngine")
        public Builder transcriptionEngine(String transcriptionEngine) {
            this.transcriptionEngine = transcriptionEngine;
            return this;
        }

        /**
         * Enable Profanity Filter
         */
        @JacksonXmlProperty(isAttribute = true, localName = "profanityFilter")
        public Builder profanityFilter(Boolean profanityFilter) {
            this.profanityFilter = profanityFilter;
            return this;
        }

        /**
         * Speech Model used by the transcription engine
         */
        @JacksonXmlProperty(isAttribute = true, localName = "speechModel")
        public Builder speechModel(String speechModel) {
            this.speechModel = speechModel;
            return this;
        }

        /**
         * Hints to be provided to the transcription engine
         */
        @JacksonXmlProperty(isAttribute = true, localName = "hints")
        public Builder hints(String hints) {
            this.hints = hints;
            return this;
        }

        /**
         * Enable Automatic Punctuation
         */
        @JacksonXmlProperty(isAttribute = true, localName = "enableAutomaticPunctuation")
        public Builder enableAutomaticPunctuation(Boolean enableAutomaticPunctuation) {
            this.enableAutomaticPunctuation = enableAutomaticPunctuation;
            return this;
        }

        /**
         * Add a child {@code <Config>} element
         */
        @JacksonXmlProperty(isAttribute = false, localName = "Config")
        public Builder config(Config config) {
            this.children.add(config);
            return this;
        }

        /**
         * Add a child {@code <Parameter>} element
         */
        @JacksonXmlProperty(isAttribute = false, localName = "Parameter")
        public Builder parameter(Parameter parameter) {
            this.children.add(parameter);
            return this;
        }

        /**
         * Create and return resulting {@code <Transcription>} element
         */
        public Transcription build() {
            return new Transcription(this);
        }
    }
}