/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.previewiam.organizations;

import com.twilio.base.bearertoken.Fetcher;
import com.twilio.http.bearertoken.BearerTokenRequest;
import com.twilio.http.bearertoken.BearerTokenTwilioRestClient;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.converter.PrefixedCollapsibleMap;
import com.twilio.converter.Converter;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Response;
import com.twilio.rest.Domains;

import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URI;
import java.time.ZonedDateTime;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import com.twilio.converter.DateConverter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import lombok.ToString;

public class AuthorizeFetcher extends Fetcher<Authorize> {
    private String responseType;
    private String clientId;
    private String redirectUri;
    private String scope;
    private String state;

    public AuthorizeFetcher(){
    }

    public AuthorizeFetcher setResponseType(final String responseType){
        this.responseType = responseType;
        return this;
    }
    public AuthorizeFetcher setClientId(final String clientId){
        this.clientId = clientId;
        return this;
    }
    public AuthorizeFetcher setRedirectUri(final String redirectUri){
        this.redirectUri = redirectUri;
        return this;
    }
    public AuthorizeFetcher setScope(final String scope){
        this.scope = scope;
        return this;
    }
    public AuthorizeFetcher setState(final String state){
        this.state = state;
        return this;
    }

    @Override
    public Authorize fetch(final BearerTokenTwilioRestClient client) {
        String path = "/v1/authorize";


        BearerTokenRequest request = new BearerTokenRequest(
            HttpMethod.GET,
            Domains.PREVIEWIAM.toString(),
            path
        );
        addQueryParams(request);
        Response response = client.request(request);

        if (response == null) {
        throw new ApiConnectionException("Authorize fetch failed: Unable to connect to server");
        } else if (!BearerTokenTwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content", response.getStatusCode());
            }
            throw new ApiException(restException);
        }

        return Authorize.fromJson(response.getStream(), client.getObjectMapper());
    }
    private void addQueryParams(final BearerTokenRequest request) {
        if (responseType != null) {
    
            request.addQueryParam("response_type", responseType);
        }
        if (clientId != null) {
    
            request.addQueryParam("client_id", clientId);
        }
        if (redirectUri != null) {
    
            request.addQueryParam("redirect_uri", redirectUri);
        }
        if (scope != null) {
    
            request.addQueryParam("scope", scope);
        }
        if (state != null) {
    
            request.addQueryParam("state", state);
        }
    }
}
