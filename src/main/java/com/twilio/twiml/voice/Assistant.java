/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml.voice;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.twilio.twiml.TwiML;
import com.twilio.twiml.TwiMLException;

import java.util.HashMap;
import java.util.Map;

/**
 * TwiML wrapper for {@code <Assistant>}
 */
@JsonDeserialize(builder = Assistant.Builder.class)
public class Assistant extends TwiML {
    private final String id;
    private final String language;
    private final String ttsLanguage;
    private final String transcriptionLanguage;
    private final String ttsProvider;
    private final String voice;
    private final String transcriptionProvider;
    private final String speechModel;
    private final Boolean profanityFilter;
    private final Boolean dtmfDetection;
    private final String welcomeGreeting;
    private final Boolean partialPrompts;
    private final Boolean interruptible;
    private final Boolean interruptByDtmf;
    private final Boolean welcomeGreetingInterruptible;
    private final Boolean debug;

    /**
     * For XML Serialization/Deserialization
     */
    private Assistant() {
        this(new Builder());
    }

    /**
     * Create a new {@code <Assistant>} element
     */
    private Assistant(Builder b) {
        super("Assistant", b);
        this.id = b.id;
        this.language = b.language;
        this.ttsLanguage = b.ttsLanguage;
        this.transcriptionLanguage = b.transcriptionLanguage;
        this.ttsProvider = b.ttsProvider;
        this.voice = b.voice;
        this.transcriptionProvider = b.transcriptionProvider;
        this.speechModel = b.speechModel;
        this.profanityFilter = b.profanityFilter;
        this.dtmfDetection = b.dtmfDetection;
        this.welcomeGreeting = b.welcomeGreeting;
        this.partialPrompts = b.partialPrompts;
        this.interruptible = b.interruptible;
        this.interruptByDtmf = b.interruptByDtmf;
        this.welcomeGreetingInterruptible = b.welcomeGreetingInterruptible;
        this.debug = b.debug;
    }

    /**
     * Attributes to set on the generated XML element
     *
     * @return A Map of attribute keys to values
     */
    protected Map<String, String> getElementAttributes() {
        // Preserve order of attributes
        Map<String, String> attrs = new HashMap<>();

        if (this.getId() != null) {
            attrs.put("id", this.getId());
        }
        if (this.getLanguage() != null) {
            attrs.put("language", this.getLanguage());
        }
        if (this.getTtsLanguage() != null) {
            attrs.put("ttsLanguage", this.getTtsLanguage());
        }
        if (this.getTranscriptionLanguage() != null) {
            attrs.put("transcriptionLanguage", this.getTranscriptionLanguage());
        }
        if (this.getTtsProvider() != null) {
            attrs.put("ttsProvider", this.getTtsProvider());
        }
        if (this.getVoice() != null) {
            attrs.put("voice", this.getVoice());
        }
        if (this.getTranscriptionProvider() != null) {
            attrs.put("transcriptionProvider", this.getTranscriptionProvider());
        }
        if (this.getSpeechModel() != null) {
            attrs.put("speechModel", this.getSpeechModel());
        }
        if (this.isProfanityFilter() != null) {
            attrs.put("profanityFilter", this.isProfanityFilter().toString());
        }
        if (this.isDtmfDetection() != null) {
            attrs.put("dtmfDetection", this.isDtmfDetection().toString());
        }
        if (this.getWelcomeGreeting() != null) {
            attrs.put("welcomeGreeting", this.getWelcomeGreeting());
        }
        if (this.isPartialPrompts() != null) {
            attrs.put("partialPrompts", this.isPartialPrompts().toString());
        }
        if (this.isInterruptible() != null) {
            attrs.put("interruptible", this.isInterruptible().toString());
        }
        if (this.isInterruptByDtmf() != null) {
            attrs.put("interruptByDtmf", this.isInterruptByDtmf().toString());
        }
        if (this.isWelcomeGreetingInterruptible() != null) {
            attrs.put("welcomeGreetingInterruptible", this.isWelcomeGreetingInterruptible().toString());
        }
        if (this.isDebug() != null) {
            attrs.put("debug", this.isDebug().toString());
        }

        return attrs;
    }

    /**
     * The assistant ID of the AI Assistant
     *
     * @return The assistant ID of the AI Assistant
     */
    public String getId() {
        return id;
    }

    /**
     * Language to be used for both text-to-speech and transcription
     *
     * @return Language to be used for both text-to-speech and transcription
     */
    public String getLanguage() {
        return language;
    }

    /**
     * Language to be used for text-to-speech
     *
     * @return Language to be used for text-to-speech
     */
    public String getTtsLanguage() {
        return ttsLanguage;
    }

    /**
     * Language to be used for transcription
     *
     * @return Language to be used for transcription
     */
    public String getTranscriptionLanguage() {
        return transcriptionLanguage;
    }

    /**
     * Provider to be used for text-to-speech
     *
     * @return Provider to be used for text-to-speech
     */
    public String getTtsProvider() {
        return ttsProvider;
    }

    /**
     * Voice to be used for text-to-speech
     *
     * @return Voice to be used for text-to-speech
     */
    public String getVoice() {
        return voice;
    }

    /**
     * Provider to be used for transcription
     *
     * @return Provider to be used for transcription
     */
    public String getTranscriptionProvider() {
        return transcriptionProvider;
    }

    /**
     * Speech model to be used for transcription
     *
     * @return Speech model to be used for transcription
     */
    public String getSpeechModel() {
        return speechModel;
    }

    /**
     * Whether profanities should be filtered out of the speech transcription
     *
     * @return Whether profanities should be filtered out of the speech
     *         transcription
     */
    public Boolean isProfanityFilter() {
        return profanityFilter;
    }

    /**
     * Whether DTMF tones should be detected and reported in speech transcription
     *
     * @return Whether DTMF tones should be detected and reported in speech
     *         transcription
     */
    public Boolean isDtmfDetection() {
        return dtmfDetection;
    }

    /**
     * The sentence to be played automatically when the session is connected
     *
     * @return The sentence to be played automatically when the session is connected
     */
    public String getWelcomeGreeting() {
        return welcomeGreeting;
    }

    /**
     * Whether partial prompts should be reported to WebSocket server before the
     * caller finishes speaking
     *
     * @return Whether partial prompts should be reported to WebSocket server
     *         before the caller finishes speaking
     */
    public Boolean isPartialPrompts() {
        return partialPrompts;
    }

    /**
     * Whether caller's speaking can interrupt the play of text-to-speech
     *
     * @return Whether caller's speaking can interrupt the play of text-to-speech
     */
    public Boolean isInterruptible() {
        return interruptible;
    }

    /**
     * Whether DTMF tone can interrupt the play of text-to-speech
     *
     * @return Whether DTMF tone can interrupt the play of text-to-speech
     */
    public Boolean isInterruptByDtmf() {
        return interruptByDtmf;
    }

    /**
     * Whether caller's speaking can interrupt the welcome greeting
     *
     * @return Whether caller's speaking can interrupt the welcome greeting
     */
    public Boolean isWelcomeGreetingInterruptible() {
        return welcomeGreetingInterruptible;
    }

    /**
     * Whether debugging on the session is enabled
     *
     * @return Whether debugging on the session is enabled
     */
    public Boolean isDebug() {
        return debug;
    }

    /**
     * Create a new {@code <Assistant>} element
     */
    @JsonPOJOBuilder(withPrefix = "")
    public static class Builder extends TwiML.Builder<Builder> {
        /**
         * Create and return a {@code <Assistant.Builder>} from an XML string
         */
        public static Builder fromXml(final String xml) throws TwiMLException {
            try {
                return OBJECT_MAPPER.readValue(xml, Builder.class);
            } catch (final JsonProcessingException jpe) {
                throw new TwiMLException(
                    "Failed to deserialize a Assistant.Builder from the provided XML string: " + jpe.getMessage());
            } catch (final Exception e) {
                throw new TwiMLException("Unhandled exception: " + e.getMessage());
            }
        }

        private String id;
        private String language;
        private String ttsLanguage;
        private String transcriptionLanguage;
        private String ttsProvider;
        private String voice;
        private String transcriptionProvider;
        private String speechModel;
        private Boolean profanityFilter;
        private Boolean dtmfDetection;
        private String welcomeGreeting;
        private Boolean partialPrompts;
        private Boolean interruptible;
        private Boolean interruptByDtmf;
        private Boolean welcomeGreetingInterruptible;
        private Boolean debug;

        /**
         * The assistant ID of the AI Assistant
         */
        @JacksonXmlProperty(isAttribute = true, localName = "id")
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Language to be used for both text-to-speech and transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "language")
        public Builder language(String language) {
            this.language = language;
            return this;
        }

        /**
         * Language to be used for text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "ttsLanguage")
        public Builder ttsLanguage(String ttsLanguage) {
            this.ttsLanguage = ttsLanguage;
            return this;
        }

        /**
         * Language to be used for transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "transcriptionLanguage")
        public Builder transcriptionLanguage(String transcriptionLanguage) {
            this.transcriptionLanguage = transcriptionLanguage;
            return this;
        }

        /**
         * Provider to be used for text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "ttsProvider")
        public Builder ttsProvider(String ttsProvider) {
            this.ttsProvider = ttsProvider;
            return this;
        }

        /**
         * Voice to be used for text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "voice")
        public Builder voice(String voice) {
            this.voice = voice;
            return this;
        }

        /**
         * Provider to be used for transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "transcriptionProvider")
        public Builder transcriptionProvider(String transcriptionProvider) {
            this.transcriptionProvider = transcriptionProvider;
            return this;
        }

        /**
         * Speech model to be used for transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "speechModel")
        public Builder speechModel(String speechModel) {
            this.speechModel = speechModel;
            return this;
        }

        /**
         * Whether profanities should be filtered out of the speech transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "profanityFilter")
        public Builder profanityFilter(Boolean profanityFilter) {
            this.profanityFilter = profanityFilter;
            return this;
        }

        /**
         * Whether DTMF tones should be detected and reported in speech transcription
         */
        @JacksonXmlProperty(isAttribute = true, localName = "dtmfDetection")
        public Builder dtmfDetection(Boolean dtmfDetection) {
            this.dtmfDetection = dtmfDetection;
            return this;
        }

        /**
         * The sentence to be played automatically when the session is connected
         */
        @JacksonXmlProperty(isAttribute = true, localName = "welcomeGreeting")
        public Builder welcomeGreeting(String welcomeGreeting) {
            this.welcomeGreeting = welcomeGreeting;
            return this;
        }

        /**
         * Whether partial prompts should be reported to WebSocket server before the
         * caller finishes speaking
         */
        @JacksonXmlProperty(isAttribute = true, localName = "partialPrompts")
        public Builder partialPrompts(Boolean partialPrompts) {
            this.partialPrompts = partialPrompts;
            return this;
        }

        /**
         * Whether caller's speaking can interrupt the play of text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "interruptible")
        public Builder interruptible(Boolean interruptible) {
            this.interruptible = interruptible;
            return this;
        }

        /**
         * Whether DTMF tone can interrupt the play of text-to-speech
         */
        @JacksonXmlProperty(isAttribute = true, localName = "interruptByDtmf")
        public Builder interruptByDtmf(Boolean interruptByDtmf) {
            this.interruptByDtmf = interruptByDtmf;
            return this;
        }

        /**
         * Whether caller's speaking can interrupt the welcome greeting
         */
        @JacksonXmlProperty(isAttribute = true, localName = "welcomeGreetingInterruptible")
        public Builder welcomeGreetingInterruptible(Boolean welcomeGreetingInterruptible) {
            this.welcomeGreetingInterruptible = welcomeGreetingInterruptible;
            return this;
        }

        /**
         * Whether debugging on the session is enabled
         */
        @JacksonXmlProperty(isAttribute = true, localName = "debug")
        public Builder debug(Boolean debug) {
            this.debug = debug;
            return this;
        }

        /**
         * Add a child {@code <Language>} element
         */
        @JacksonXmlProperty(isAttribute = false, localName = "Language")
        public Builder language(Language language) {
            this.children.add(language);
            return this;
        }

        /**
         * Add a child {@code <Parameter>} element
         */
        @JacksonXmlProperty(isAttribute = false, localName = "Parameter")
        public Builder parameter(Parameter parameter) {
            this.children.add(parameter);
            return this;
        }

        /**
         * Create and return resulting {@code <Assistant>} element
         */
        public Assistant build() {
            return new Assistant(this);
        }
    }
}