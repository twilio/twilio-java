/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.messaging.v2;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.List;
import java.util.Objects;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.ToString;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class ChannelsSender extends Resource {

    private static final long serialVersionUID = 42075077215889L;

    @ToString
    public static class MessagingV2ChannelsSenderConfiguration {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("waba_id")
        @Getter
        @Setter
        private String wabaId;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("verification_method")
        @Getter
        @Setter
        private VerificationMethodEnum verificationMethod;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("verification_code")
        @Getter
        @Setter
        private String verificationCode;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("voice_application_sid")
        @Getter
        @Setter
        private String voiceApplicationSid;

        public static MessagingV2ChannelsSenderConfiguration fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderConfiguration.class
            );
        }
    }

    @ToString
    public static class MessagingV2ChannelsSenderWebhook {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("callback_url")
        @Getter
        @Setter
        private String callbackUrl;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("callback_method")
        @Getter
        @Setter
        private CallbackMethodEnum callbackMethod;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("fallback_url")
        @Getter
        @Setter
        private String fallbackUrl;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("fallback_method")
        @Getter
        @Setter
        private FallbackMethodEnum fallbackMethod;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("status_callback_url")
        @Getter
        @Setter
        private String statusCallbackUrl;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("status_callback_method")
        @Getter
        @Setter
        private String statusCallbackMethod;

        public static MessagingV2ChannelsSenderWebhook fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderWebhook.class
            );
        }
    }

    @ToString
    public static class MessagingV2ChannelsSenderProfile {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("name")
        @Getter
        @Setter
        private String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("about")
        @Getter
        @Setter
        private String about;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("address")
        @Getter
        @Setter
        private String address;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("description")
        @Getter
        @Setter
        private String description;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("emails")
        @Getter
        @Setter
        private Object emails;

        public String getEmails() {
            return Converter.objectToJson(emails);
        }

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("logo_url")
        @Getter
        @Setter
        private String logoUrl;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("vertical")
        @Getter
        @Setter
        private String vertical;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("websites")
        @Getter
        @Setter
        private Object websites;

        public String getWebsites() {
            return Converter.objectToJson(websites);
        }

        public static MessagingV2ChannelsSenderProfile fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderProfile.class
            );
        }
    }

    @ToString
    public static class MessagingV2ChannelsSenderRequestsCreate {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("sender_id")
        @Getter
        @Setter
        private String senderId;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("configuration")
        @Getter
        @Setter
        private MessagingV2ChannelsSenderConfiguration configuration;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("webhook")
        @Getter
        @Setter
        private MessagingV2ChannelsSenderWebhook webhook;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("profile")
        @Getter
        @Setter
        private MessagingV2ChannelsSenderProfile profile;

        public MessagingV2ChannelsSenderRequestsCreate() {}

        public static MessagingV2ChannelsSenderRequestsCreate fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderRequestsCreate.class
            );
        }
    }

    @ToString
    public static class MessagingV2ChannelsSenderRequestsUpdate {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("configuration")
        @Getter
        @Setter
        private MessagingV2ChannelsSenderConfiguration configuration;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("webhook")
        @Getter
        @Setter
        private MessagingV2ChannelsSenderWebhook webhook;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("profile")
        @Getter
        @Setter
        private MessagingV2ChannelsSenderProfile profile;

        public MessagingV2ChannelsSenderRequestsUpdate() {}

        public static MessagingV2ChannelsSenderRequestsUpdate fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderRequestsUpdate.class
            );
        }
    }

    @ToString
    public static class MessagingV2ChannelsSenderProperties {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("quality_rating")
        @Getter
        @Setter
        private String qualityRating;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("messaging_limit")
        @Getter
        @Setter
        private String messagingLimit;

        public static MessagingV2ChannelsSenderProperties fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderProperties.class
            );
        }
    }

    @ToString
    public static class MessagingV2ChannelsSenderOfflineReasonsItems {

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("code")
        @Getter
        @Setter
        private String code;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("message")
        @Getter
        @Setter
        private String message;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        @JsonProperty("more_info")
        @Getter
        @Setter
        private URI moreInfo;

        public static MessagingV2ChannelsSenderOfflineReasonsItems fromJson(
            String jsonString,
            ObjectMapper mapper
        ) throws IOException {
            return mapper.readValue(
                jsonString,
                MessagingV2ChannelsSenderOfflineReasonsItems.class
            );
        }
    }

    public static ChannelsSenderCreator creator(
        final ChannelsSender.MessagingV2ChannelsSenderRequestsCreate messagingV2ChannelsSenderRequestsCreate
    ) {
        return new ChannelsSenderCreator(
            messagingV2ChannelsSenderRequestsCreate
        );
    }

    public static ChannelsSenderDeleter deleter(final String pathSid) {
        return new ChannelsSenderDeleter(pathSid);
    }

    public static ChannelsSenderFetcher fetcher(final String pathSid) {
        return new ChannelsSenderFetcher(pathSid);
    }

    public static ChannelsSenderReader reader(final String channel) {
        return new ChannelsSenderReader(channel);
    }

    public static ChannelsSenderUpdater updater(final String pathSid) {
        return new ChannelsSenderUpdater(pathSid);
    }

    /**
     * Converts a JSON String into a ChannelsSender object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return ChannelsSender object represented by the provided JSON
     */
    public static ChannelsSender fromJson(
        final String json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ChannelsSender.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a ChannelsSender object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return ChannelsSender object represented by the provided JSON
     */
    public static ChannelsSender fromJson(
        final InputStream json,
        final ObjectMapper objectMapper
    ) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ChannelsSender.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String sid;
    private final ChannelsSender.Status status;
    private final String senderId;
    private final MessagingV2ChannelsSenderConfiguration configuration;
    private final MessagingV2ChannelsSenderWebhook webhook;
    private final MessagingV2ChannelsSenderProfile profile;
    private final MessagingV2ChannelsSenderProperties properties;
    private final List<
        MessagingV2ChannelsSenderOfflineReasonsItems
    > offlineReasons;
    private final URI url;

    @JsonCreator
    private ChannelsSender(
        @JsonProperty("sid") final String sid,
        @JsonProperty("status") final ChannelsSender.Status status,
        @JsonProperty("sender_id") final String senderId,
        @JsonProperty(
            "configuration"
        ) final MessagingV2ChannelsSenderConfiguration configuration,
        @JsonProperty("webhook") final MessagingV2ChannelsSenderWebhook webhook,
        @JsonProperty("profile") final MessagingV2ChannelsSenderProfile profile,
        @JsonProperty(
            "properties"
        ) final MessagingV2ChannelsSenderProperties properties,
        @JsonProperty("offline_reasons") final List<
            MessagingV2ChannelsSenderOfflineReasonsItems
        > offlineReasons,
        @JsonProperty("url") final URI url
    ) {
        this.sid = sid;
        this.status = status;
        this.senderId = senderId;
        this.configuration = configuration;
        this.webhook = webhook;
        this.profile = profile;
        this.properties = properties;
        this.offlineReasons = offlineReasons;
        this.url = url;
    }

    public final String getSid() {
        return this.sid;
    }

    public final ChannelsSender.Status getStatus() {
        return this.status;
    }

    public final String getSenderId() {
        return this.senderId;
    }

    public final MessagingV2ChannelsSenderConfiguration getConfiguration() {
        return this.configuration;
    }

    public final MessagingV2ChannelsSenderWebhook getWebhook() {
        return this.webhook;
    }

    public final MessagingV2ChannelsSenderProfile getProfile() {
        return this.profile;
    }

    public final MessagingV2ChannelsSenderProperties getProperties() {
        return this.properties;
    }

    public final List<
        MessagingV2ChannelsSenderOfflineReasonsItems
    > getOfflineReasons() {
        return this.offlineReasons;
    }

    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ChannelsSender other = (ChannelsSender) o;

        return (
            Objects.equals(sid, other.sid) &&
            Objects.equals(status, other.status) &&
            Objects.equals(senderId, other.senderId) &&
            Objects.equals(configuration, other.configuration) &&
            Objects.equals(webhook, other.webhook) &&
            Objects.equals(profile, other.profile) &&
            Objects.equals(properties, other.properties) &&
            Objects.equals(offlineReasons, other.offlineReasons) &&
            Objects.equals(url, other.url)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            sid,
            status,
            senderId,
            configuration,
            webhook,
            profile,
            properties,
            offlineReasons,
            url
        );
    }

    public enum VerificationMethodEnum {
        SMS("sms"),
        VOICE("voice");

        private final String value;

        private VerificationMethodEnum(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static VerificationMethodEnum forValue(final String value) {
            return Promoter.enumFromString(
                value,
                VerificationMethodEnum.values()
            );
        }
    }

    public enum FallbackMethodEnum {
        POST("POST"),
        PUT("PUT");

        private final String value;

        private FallbackMethodEnum(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static FallbackMethodEnum forValue(final String value) {
            return Promoter.enumFromString(value, FallbackMethodEnum.values());
        }
    }

    public enum Status {
        CREATING("CREATING"),
        ONLINE("ONLINE"),
        OFFLINE("OFFLINE"),
        PENDING_VERIFICATION("PENDING_VERIFICATION"),
        VERIFYING("VERIFYING"),
        ONLINE_UPDATING("ONLINE:UPDATING"),
        STUBBED("STUBBED");

        private final String value;

        private Status(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static Status forValue(final String value) {
            return Promoter.enumFromString(value, Status.values());
        }
    }

    public enum CallbackMethodEnum {
        POST("POST"),
        PUT("PUT");

        private final String value;

        private CallbackMethodEnum(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        @JsonCreator
        public static CallbackMethodEnum forValue(final String value) {
            return Promoter.enumFromString(value, CallbackMethodEnum.values());
        }
    }
}
